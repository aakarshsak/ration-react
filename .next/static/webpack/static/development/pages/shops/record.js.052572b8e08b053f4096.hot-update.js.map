{"version":3,"file":"static/webpack/static/development/pages/shops/record.js.052572b8e08b053f4096.hot-update.js","sources":["webpack:///./pages/shops/record.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport validate from '../../localmodules/token_validate';\nimport { Header, Table, Button } from 'semantic-ui-react';\nimport post from '../../localmodules/express_post';\nimport postWithData from '../../localmodules/express_post_data';\nimport Shop from '../../ethereum/shop';\n\n\nexport default class PreviousRecord extends Component {\n\n    static async getInitialProps(props) {\n        const { headerToken, loggedIn } = validate(props.query.headerToken);\n        const address = props.query.address;\n        console.log(address);\n        const shop = Shop(address);\n        \n        const fpdNameValue = await shop.methods.fpdName().call();\n        const dataInp = {\n            fpdName : fpdNameValue\n        }\n        const headers = { 'Content-Type':'application/json'};\n        const { data, status } = await postWithData('/record/record_list', headers, dataInp)\n        const records = data['result'];\n        let nameList = [];\n        for(let i=0;i<records.length;i++){\n            const data = {\n                ration : records[i].ration\n            }\n            const headers = {\n                'Content-Type':'application/json'\n            };\n            \n            const { text, status } = await post('/user/login/me/name', headers, data);\n            nameList[i] = text;\n        }\n        console.log(nameList);\n        return { headerToken , loggedIn, address, records, nameList } //, recordLength, rice, wheat, arhad, kerosene };\n    }\n\n    renderTable() {\n\n        const tableRows = this.props.records.map((item, index) => {\n            return (\n                <Table.Row key={index}>\n                    <Table.Cell>{this.props.records.length - index}</Table.Cell>\n                    <Table.Cell>{this.props.nameList[index]}</Table.Cell>\n                    <Table.Cell>{item.rice}</Table.Cell>\n                    <Table.Cell>{item.wheat}</Table.Cell>\n                    <Table.Cell>{item.arhad}</Table.Cell>\n                    <Table.Cell>{item.kerosene}</Table.Cell>\n                    <Table.Cell>{item.date.substring(0, item.date.indexOf('('))}</Table.Cell>\n                    {/* <Table.Cell>{item.orderid}</Table.Cell> */}\n                </Table.Row>\n            );\n        });\n        return (\n            <div>\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>SLNO.</Table.HeaderCell>\n                            <Table.HeaderCell>Holder Name</Table.HeaderCell>\n                            <Table.HeaderCell>Rice</Table.HeaderCell>\n                            <Table.HeaderCell>Wheat</Table.HeaderCell>\n                            <Table.HeaderCell>Arhad</Table.HeaderCell>\n                            <Table.HeaderCell>Sugar</Table.HeaderCell>\n                            <Table.HeaderCell>Date</Table.HeaderCell>\n                            {/* <Table.HeaderCell>Order Id</Table.HeaderCell> */}\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {tableRows.reverse()}\n                    </Table.Body>\n                </Table>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Layout loggedIn={this.props.loggedIn} headerToken={this.props.headerToken}>\n                 <Header as='h2' textAlign='center' style={{color:'#2185d0'}}>RECORD TIMESTAMP</Header>\n                 {this.renderTable()}\n            </Layout>\n                \n        );\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const recordLength = await shop.methods.recordCount().call();\n        // const rice = await shop.methods.rice().call();\n        // const wheat = await shop.methods.wheat().call();\n        // const arhad = await shop.methods.arhad().call();\n        // const kerosene = await shop.methods.kerosene().call();\n        // console.log(rice, wheat, arhad, kerosene);\n        // const records = await Promise.all(\n        //     Array(parseInt(recordLength))\n        //       .fill()\n        //       .map((element, index) => {\n        //         return shop.methods.recordList(index).call();\n        //       })\n        //   );"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AA+BA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAWA;AACA;AAqBA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;AA5EA;;;;;;;AACA;AACA;AACA;AACA;;AAEA;AACA;;AADA;AACA;AACA;AADA;AAGA;AAAA;AAAA;;AACA;AACA;;;AADA;AAAA;AACA;AACA;AACA;AACA;;AADA;;;;;AACA;AACA;AADA;AAGA;AACA;AADA;;AAIA;AACA;;;AADA;AAAA;AACA;AACA;;AAVA;;;;;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AA7BA;AA6GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}