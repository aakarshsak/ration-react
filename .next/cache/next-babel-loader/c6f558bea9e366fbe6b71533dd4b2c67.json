{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime-corejs2/regenerator\");\n\nvar Web3 = require('web3');\n\nvar web3;\n\nvar f = function f() {\n  return _regeneratorRuntime.async(function f$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!window.ethereum) {\n            _context.next = 9;\n            break;\n          }\n\n          window.web3 = new Web3(ethereum);\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ethereum.enable());\n\n        case 5:\n          _context.next = 9;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](2);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 7]]);\n};\n\nvar funct = function funct(web) {\n  var accounts;\n  return _regeneratorRuntime.async(function funct$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(web.eth.getAccounts());\n\n        case 2:\n          accounts = _context2.sent;\n          console.log('Accounts', accounts);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};\n\nif (true && typeof window.web3 !== 'undefined') {\n  // We are in the browser and metamask is running.\n  console.log(' We are in the browser and metamask is running.', window);\n  web3 = new Web3(window.ethereum);\n  funct(web3);\n} else {\n  // We are on the server *OR* the user is not running metamask\n  console.log('We are on the server *OR* the user is not running metamask');\n  var provider = new Web3.providers.HttpProvider('https://rinkeby.infura.io/v3/42d235c7d6304509a63bec8b043c9bc2');\n  web3 = new Web3(provider);\n  funct(web3);\n}\n\nmodule.exports = web3;","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/ethereum/web3.js"],"names":["Web3","require","web3","f","window","ethereum","enable","funct","web","eth","getAccounts","accounts","console","log","provider","providers","HttpProvider","module","exports"],"mappings":";;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAIC,IAAJ;;AAGA,IAAMC,CAAC,GAAG,SAAJA,CAAI;AAAA;AAAA;AAAA;AAAA;AAAA,eACJC,MAAM,CAACC,QADH;AAAA;AAAA;AAAA;;AAEND,UAAAA,MAAM,CAACF,IAAP,GAAc,IAAIF,IAAJ,CAASK,QAAT,CAAd;AAFM;AAAA;AAAA,2CAKIA,QAAQ,CAACC,MAAT,EALJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAV;;AAiBA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACWA,GAAG,CAACC,GAAJ,CAAQC,WAAR,EADX;;AAAA;AACNC,UAAAA,QADM;AAEZC,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;;AAFY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;;AAKA,IAAI,QAAiC,OAAOP,MAAM,CAACF,IAAd,KAAuB,WAA5D,EAAyE;AACvE;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ,EAA+DT,MAA/D;AACAF,EAAAA,IAAI,GAAG,IAAIF,IAAJ,CAASI,MAAM,CAACC,QAAhB,CAAP;AACAE,EAAAA,KAAK,CAACL,IAAD,CAAL;AACD,CALD,MAKO;AACL;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,4DAAZ;AACA,MAAMC,QAAQ,GAAG,IAAId,IAAI,CAACe,SAAL,CAAeC,YAAnB,CACf,+DADe,CAAjB;AAGAd,EAAAA,IAAI,GAAG,IAAIF,IAAJ,CAASc,QAAT,CAAP;AACAP,EAAAA,KAAK,CAACL,IAAD,CAAL;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiBhB,IAAjB","sourcesContent":["const Web3 = require('web3');\n\nlet web3;\n\n\nconst f = async () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(ethereum);\n    try {\n        // Request account access if needed\n        await ethereum.enable();\n        // Acccounts now exposed\n    } catch (error) {\n        // User denied account access...\n    }\n}\n}\n\n\n\n\n\nconst funct = async (web) => {\n  const accounts = await web.eth.getAccounts();\n  console.log('Accounts', accounts);\n}\n\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n  // We are in the browser and metamask is running.\n  console.log(' We are in the browser and metamask is running.', window);\n  web3 = new Web3(window.ethereum);\n  funct(web3);\n} else {\n  // We are on the server *OR* the user is not running metamask\n  console.log('We are on the server *OR* the user is not running metamask')\n  const provider = new Web3.providers.HttpProvider(\n    'https://rinkeby.infura.io/v3/42d235c7d6304509a63bec8b043c9bc2'\n  );\n  web3 = new Web3(provider);\n  funct(web3);\n}\n\nmodule.exports = web3;"]},"metadata":{},"sourceType":"script"}