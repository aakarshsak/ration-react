{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar _crossFetch = _interopRequireDefault(require(\"cross-fetch\"));\n\nvar postWithData = function postWithData(url, headers, dataInp) {\n  var options, newUrl, res, data, status;\n  return _regenerator[\"default\"].async(function postWithData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = {\n            method: 'post',\n            headers: headers,\n            body: (0, _stringify[\"default\"])(dataInp)\n          };\n          newUrl = 'http://localhost:7800' + url;\n          _context.next = 4;\n          return _regenerator[\"default\"].awrap((0, _crossFetch[\"default\"])(newUrl, options));\n\n        case 4:\n          res = _context.sent;\n          _context.next = 7;\n          return _regenerator[\"default\"].awrap(res.json());\n\n        case 7:\n          data = _context.sent;\n          _context.next = 10;\n          return _regenerator[\"default\"].awrap(res.status);\n\n        case 10:\n          status = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data,\n            status: status\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nmodule.exports = postWithData;","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/localmodules/express_get_data.js"],"names":["postWithData","url","headers","dataInp","options","method","body","newUrl","res","json","data","status","module","exports"],"mappings":";;;;;;;;AAAA;;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAOC,GAAP,EAAYC,OAAZ,EAAqBC,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXC,UAAAA,OAFW,GAED;AACZC,YAAAA,MAAM,EAAG,MADG;AAEZH,YAAAA,OAAO,EAAPA,OAFY;AAGZI,YAAAA,IAAI,EAAG,2BAAeH,OAAf;AAHK,WAFC;AAQXI,UAAAA,MARW,GAQF,0BAA0BN,GARxB;AAAA;AAAA,+CASC,4BAAMM,MAAN,EAAcH,OAAd,CATD;;AAAA;AASXI,UAAAA,GATW;AAAA;AAAA,+CAUEA,GAAG,CAACC,IAAJ,EAVF;;AAAA;AAUXC,UAAAA,IAVW;AAAA;AAAA,+CAWIF,GAAG,CAACG,MAXR;;AAAA;AAWXA,UAAAA,MAXW;AAAA,2CAaV;AACHD,YAAAA,IAAI,EAAJA,IADG;AAEHC,YAAAA,MAAM,EAANA;AAFG,WAbU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAmBAC,MAAM,CAACC,OAAP,GAAiBb,YAAjB","sourcesContent":["import fetch from 'cross-fetch';\n\nconst postWithData = async (url, headers, dataInp) => {\n\n    const options = {\n        method : 'post',\n        headers,\n        body : JSON.stringify(dataInp)\n    }\n\n    const newUrl = 'http://localhost:7800' + url; \n    const res = await fetch(newUrl, options);\n    const data = await res.json();\n    const status = await res.status;\n\n    return {\n        data,\n        status\n    }\n}\n\nmodule.exports = postWithData;"]},"metadata":{},"sourceType":"script"}