{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Input, Button } from 'semantic-ui-react';\nimport saveToEthereum from '../../localmodules/data_initialization';\nimport factory from '../../ethereum/factory';\nimport web3 from '../../ethereum/web3';\nexport default class UpdateBlockChain extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      managerName: '',\n      fpdName: '',\n      shopName: '',\n      rice: '',\n      wheat: '',\n      arhad: '',\n      addr: ''\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      const obj = this.state;\n      const accounts = await web3.eth.getAccounts();\n      console.log(accounts, obj);\n      saveToEthereum(obj); // await factory.methods\n      //     .createShop(obj.managerName, obj.rice, obj.wheat, obj.arhad, obj.fpdName, obj.shopName, obj.addr)\n      //     .send({\n      //         from: accounts[0],\n      // });\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Form, {\n      onSubmit: this.onSubmit\n    }, __jsx(Form.Field, null, __jsx(\"label\", null, \"Manager Name\"), __jsx(Input, {\n      placeholder: \"Manager Name\",\n      type: \"text\",\n      value: this.state.managerName,\n      onChange: event => this.setState({\n        managerName: event.target.value\n      })\n    })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Shop Name\"), __jsx(Input, {\n      placeholder: \"Shop Name\",\n      type: \"text\",\n      value: this.state.shopName,\n      onChange: event => this.setState({\n        shopName: event.target.value\n      })\n    })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Address\"), __jsx(Input, {\n      placeholder: \"Address\",\n      type: \"text\",\n      value: this.state.addr,\n      onChange: event => this.setState({\n        addr: event.target.value\n      })\n    })), __jsx(Form.Field, null, __jsx(\"label\", null, \"FPD Name\"), __jsx(Input, {\n      placeholder: \"FPD Name\",\n      type: \"text\",\n      value: this.state.fpdName,\n      onChange: event => this.setState({\n        fpdName: event.target.value\n      })\n    })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Rice\"), __jsx(Input, {\n      placeholder: \"Rice\",\n      type: \"number\",\n      value: this.state.rice,\n      onChange: event => this.setState({\n        rice: event.target.value\n      })\n    })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Wheat\"), __jsx(Input, {\n      placeholder: \"Wheat\",\n      type: \"number\",\n      value: this.state.wheat,\n      onChange: event => this.setState({\n        wheat: event.target.value\n      })\n    })), __jsx(Form.Field, null, __jsx(\"label\", null, \"Wheat\"), __jsx(Input, {\n      placeholder: \"Wheat\",\n      type: \"number\",\n      value: this.state.arhad,\n      onChange: event => this.setState({\n        arhad: event.target.value\n      })\n    })), __jsx(Button, null, \"Submit\")));\n  }\n\n}","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/pages/admin/update.js"],"names":["React","Component","Form","Input","Button","saveToEthereum","factory","web3","UpdateBlockChain","managerName","fpdName","shopName","rice","wheat","arhad","addr","event","preventDefault","obj","state","accounts","eth","getAccounts","console","log","render","onSubmit","setState","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Input, Button } from 'semantic-ui-react';\nimport saveToEthereum from '../../localmodules/data_initialization';\nimport factory from '../../ethereum/factory';\nimport web3 from '../../ethereum/web3';\n\n\nexport default class UpdateBlockChain extends Component {\n\n    state = {\n        managerName : '',\n        fpdName : '',\n        shopName : '',\n        rice : '',\n        wheat : '',\n        arhad : '',\n        addr : ''\n    }\n\n    onSubmit = async (event) => {\n        event.preventDefault();\n\n        const obj = this.state;\n        const accounts = await web3.eth.getAccounts();\n        console.log(accounts, obj);\n        saveToEthereum(obj);\n\n        // await factory.methods\n        //     .createShop(obj.managerName, obj.rice, obj.wheat, obj.arhad, obj.fpdName, obj.shopName, obj.addr)\n        //     .send({\n        //         from: accounts[0],\n        // });\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Form onSubmit={this.onSubmit}>\n                    <Form.Field>\n                        <label>Manager Name</label>\n                        <Input\n                            placeholder='Manager Name'\n                            type='text'\n                            value={this.state.managerName}\n                            onChange={ event => this.setState({ managerName : event.target.value }) }\n                            />\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Shop Name</label>\n                        <Input\n                            placeholder='Shop Name'\n                            type='text'\n                            value={this.state.shopName}\n                            onChange={ event => this.setState({ shopName : event.target.value }) }\n                            />\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Address</label>\n                        <Input\n                            placeholder='Address'\n                            type='text'\n                            value={this.state.addr}\n                            onChange={ event => this.setState({ addr : event.target.value }) }\n                            />\n                    </Form.Field>\n                    <Form.Field>\n                        <label>FPD Name</label>\n                        <Input\n                            placeholder='FPD Name'\n                            type='text'\n                            value={this.state.fpdName}\n                            onChange={ event => this.setState({ fpdName : event.target.value }) }\n                            />\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Rice</label>\n                        <Input\n                            placeholder='Rice'\n                            type='number'\n                            value={this.state.rice}\n                            onChange={ event => this.setState({ rice : event.target.value }) }\n                            />\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Wheat</label>\n                        <Input\n                            placeholder='Wheat'\n                            type='number'\n                            value={this.state.wheat}\n                            onChange={ event => this.setState({ wheat : event.target.value }) }\n                            />\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Wheat</label>\n                        <Input\n                            placeholder='Wheat'\n                            type='number'\n                            value={this.state.arhad}\n                            onChange={ event => this.setState({ arhad : event.target.value }) }\n                            />\n                    </Form.Field>\n                    <Button>Submit</Button>\n                </Form>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}