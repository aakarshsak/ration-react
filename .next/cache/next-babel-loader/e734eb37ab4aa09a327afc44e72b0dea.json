{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Comment, Header, Form, Button } from 'semantic-ui-react';\nimport postWithData from '../localmodules/express_post_data';\n\nvar CommentExampleComment = /*#__PURE__*/function (_Component) {\n  _inherits(CommentExampleComment, _Component);\n\n  function CommentExampleComment() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CommentExampleComment);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CommentExampleComment)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      currentComment: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"postComplaint\", function (event) {\n      event.preventDefault();\n    });\n\n    return _this;\n  }\n\n  _createClass(CommentExampleComment, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var data = ['a', 'b', 'c'];\n      var comments = data.map(function (item, index) {\n        return __jsx(Comment, null, __jsx(Comment.Content, null, __jsx(Comment.Author, {\n          as: \"a\"\n        }, \"Matt\"), __jsx(Comment.Metadata, null, __jsx(\"div\", null, \"Today at 5:42PM\")), __jsx(Comment.Text, null, \"How artistic!\"), __jsx(Comment.Actions, null, __jsx(Comment.Action, null, \"Reply\"))));\n      });\n      return __jsx(Comment.Group, null, __jsx(Header, {\n        as: \"h3\",\n        dividing: true\n      }, \"Complaints\"), comments, __jsx(Form, {\n        reply: true,\n        onSubmit: this.postComplaint\n      }, __jsx(Form.TextArea, {\n        value: this.state.currentComment,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            currentComment: e.target.value\n          });\n        }\n      }), __jsx(Button, {\n        content: \"Add Reply\",\n        labelPosition: \"left\",\n        icon: \"edit\",\n        primary: true\n      })));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var dataInp, headers, _ref, data, status;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dataInp = {\n                fpdName: props.fpdName\n              };\n              headers = {\n                'Content-Type': 'application/json'\n              };\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(postWithProps('/complaints/list', headers, dataInp));\n\n            case 4:\n              _ref = _context.sent;\n              data = _ref.data;\n              status = _ref.status;\n              console.log(data['record']);\n              return _context.abrupt(\"return\", {\n                data: ['a', 'b', 'c']\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return CommentExampleComment;\n}(Component);\n\nexport { CommentExampleComment as default };","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/components/complaint.js"],"names":["React","Component","Comment","Header","Form","Button","postWithData","CommentExampleComment","currentComment","event","preventDefault","data","comments","map","item","index","postComplaint","state","e","setState","target","value","props","dataInp","fpdName","headers","postWithProps","status","console","log"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,EAAgBC,MAAhB,EAAwBC,IAAxB,EAA8BC,MAA9B,QAA2C,mBAA3C;AACA,OAAOC,YAAP,MAAyB,mCAAzB;;IAEqBC,qB;;;;;;;;;;;;;;;;4DAET;AACJC,MAAAA,cAAc,EAAG;AADb,K;;oEAcQ,UAACC,KAAD,EAAU;AACtBA,MAAAA,KAAK,CAACC,cAAN;AACH,K;;;;;;;6BAEQ;AAAA;;AACL,UAAMC,IAAI,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAb;AACA,UAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAAS,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACvC,eACI,MAAC,OAAD,QACI,MAAC,OAAD,CAAS,OAAT,QACA,MAAC,OAAD,CAAS,MAAT;AAAgB,UAAA,EAAE,EAAC;AAAnB,kBADA,EAEA,MAAC,OAAD,CAAS,QAAT,QACI,qCADJ,CAFA,EAKA,MAAC,OAAD,CAAS,IAAT,wBALA,EAMA,MAAC,OAAD,CAAS,OAAT,QACI,MAAC,OAAD,CAAS,MAAT,gBADJ,CANA,CADJ,CADJ;AAcH,OAfgB,CAAjB;AAiBA,aACI,MAAC,OAAD,CAAS,KAAT,QACA,MAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,QAAQ;AAAxB,sBADA,EAKCH,QALD,EAOA,MAAC,IAAD;AAAM,QAAA,KAAK,MAAX;AAAY,QAAA,QAAQ,EAAE,KAAKI;AAA3B,SACI,MAAC,IAAD,CAAM,QAAN;AACI,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAWT,cADtB;AAEI,QAAA,QAAQ,EAAI,kBAACU,CAAD;AAAA,iBAAO,MAAI,CAACC,QAAL,CAAc;AAACX,YAAAA,cAAc,EAAGU,CAAC,CAACE,MAAF,CAASC;AAA3B,WAAd,CAAP;AAAA;AAFhB,QADJ,EAKI,MAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,aAAa,EAAC,MAA1C;AAAiD,QAAA,IAAI,EAAC,MAAtD;AAA6D,QAAA,OAAO;AAApE,QALJ,CAPA,CADJ;AAiBH;;;oCAlD4BC,K;;;;;;;AACnBC,cAAAA,O,GAAU;AACZC,gBAAAA,OAAO,EAAGF,KAAK,CAACE;AADJ,e;AAGVC,cAAAA,O,GAAU;AAAE,gCAAe;AAAjB,e;;+CACeC,aAAa,CAAC,kBAAD,EAAqBD,OAArB,EAA8BF,OAA9B,C;;;;AAApCZ,cAAAA,I,QAAAA,I;AAAMgB,cAAAA,M,QAAAA,M;AACdC,cAAAA,OAAO,CAACC,GAAR,CAAYlB,IAAI,CAAC,QAAD,CAAhB;+CACO;AAAEA,gBAAAA,IAAI,EAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AAAT,e;;;;;;;;;;;;EAboCV,S;;SAA9BM,qB","sourcesContent":["import React, {Component} from 'react';\nimport {Comment,Header, Form, Button} from 'semantic-ui-react';\nimport postWithData from '../localmodules/express_post_data';\n\nexport default class CommentExampleComment extends Component {\n\n    state = {\n        currentComment : ''\n    }\n\n    static async getInitialProps(props){\n        const dataInp = {\n            fpdName : props.fpdName\n        }\n        const headers = { 'Content-Type':'application/json'};\n        const { data, status } = await postWithProps('/complaints/list', headers, dataInp);\n        console.log(data['record']);\n        return { data : ['a', 'b', 'c'] };\n    }\n\n    postComplaint = (event) =>{\n        event.preventDefault();\n    }\n\n    render() {\n        const data = ['a', 'b', 'c'];\n        const comments = data.map((item, index) => {\n            return (\n                <Comment>\n                    <Comment.Content>\n                    <Comment.Author as='a'>Matt</Comment.Author>\n                    <Comment.Metadata>\n                        <div>Today at 5:42PM</div>\n                    </Comment.Metadata>\n                    <Comment.Text>How artistic!</Comment.Text>\n                    <Comment.Actions>\n                        <Comment.Action>Reply</Comment.Action>\n                    </Comment.Actions>\n                    </Comment.Content>\n                </Comment>\n            );\n        });\n        \n        return (\n            <Comment.Group>\n            <Header as='h3' dividing>\n                Complaints\n            </Header>\n        \n            {comments}\n        \n            <Form reply onSubmit={this.postComplaint}>\n                <Form.TextArea \n                    value={this.state.currentComment}\n                    onChange = {(e) => this.setState({currentComment : e.target.value})}\n                />\n                <Button content='Add Reply' labelPosition='left' icon='edit' primary />\n            </Form>\n            </Comment.Group>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}