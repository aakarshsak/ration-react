{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Button, Form, Grid, Header, Message, Segment } from 'semantic-ui-react';\nimport Layout from '../../components/layout.js';\nimport { Router, Link } from '../../routes';\nimport fetch from 'cross-fetch';\n\nclass LoginForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      email: '',\n      password: '',\n      res: '',\n      errorMessage: ''\n    });\n\n    _defineProperty(this, \"callAPI\", async () => {\n      this.setState({\n        errorMessage: '',\n        res: ''\n      });\n      const data = {\n        email: this.state.email,\n        password: this.state.password\n      };\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }; //const req = new Request('http://localhost:7800/user/login', options);\n\n      const res = await fetch('http://localhost:7800/user/login', options);\n      const text = await res.text();\n      const status = await res.status;\n\n      if (status === 400) {\n        this.setState({\n          errorMessage: text,\n          email: '',\n          password: ''\n        });\n      } else {\n        this.setState({\n          res: text\n        });\n        console.log(text);\n        Router.pushRoute('/');\n      }\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      this.callAPI();\n      console(\"Response : \", this.state.res);\n      const options = {\n        method: 'get',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-auth-token': this.state.res\n        }\n      };\n      const res = await fetch('http://localhost:7800/user/login/me', options);\n      const text = await JSON.stringify(res.text());\n      const status = await res.status;\n      console.log(text);\n      console.log(status);\n    });\n\n    _defineProperty(this, \"showError\", () => {\n      if (this.state.errorMessage === '') {\n        return null;\n      }\n\n      return __jsx(Message, {\n        error: true,\n        header: this.state.errorMessage\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(Grid, {\n      textAlign: \"center\",\n      style: {\n        height: '100vh'\n      },\n      verticalAlign: \"middle\"\n    }, __jsx(Grid.Column, {\n      style: {\n        maxWidth: 450\n      }\n    }, __jsx(Header, {\n      as: \"h2\",\n      color: \"blue\",\n      textAlign: \"center\"\n    }, \"Log-in to your account\"), __jsx(Form, {\n      size: \"large\",\n      onSubmit: this.onSubmit\n    }, __jsx(Segment, {\n      stacked: true\n    }, __jsx(Form.Input, {\n      val: this.state.email,\n      onChange: event => {\n        this.setState({\n          email: event.target.value\n        });\n      },\n      type: \"email\",\n      fluid: true,\n      icon: \"user\",\n      iconPosition: \"left\",\n      placeholder: \"E-mail address\"\n    }), __jsx(Form.Input, {\n      val: this.state.password,\n      onChange: event => {\n        this.setState({\n          password: event.target.value\n        });\n      },\n      fluid: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      placeholder: \"Password\",\n      type: \"password\"\n    }), __jsx(Button, {\n      color: \"blue\",\n      fluid: true,\n      size: \"large\"\n    }, \"Login\"))), __jsx(Message, null, \"New to us? \", __jsx(Link, {\n      route: \"/user/register\"\n    }, __jsx(\"a\", null, \"Sign Up\"))), this.showError())));\n  }\n\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/pages/user/login.js"],"names":["React","Component","Button","Form","Grid","Header","Message","Segment","Layout","Router","Link","fetch","LoginForm","email","password","res","errorMessage","setState","data","state","options","method","headers","body","JSON","stringify","text","status","console","log","pushRoute","event","preventDefault","callAPI","render","height","maxWidth","onSubmit","target","value","showError"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Button, Form, Grid, Header, Message, Segment } from 'semantic-ui-react';\nimport Layout from '../../components/layout.js'\nimport { Router, Link } from '../../routes';\nimport fetch from 'cross-fetch';\n\nclass LoginForm extends Component {\n\n    state = {\n        email : '',\n        password : '',\n        res : '',\n        errorMessage : ''\n    }\n\n    callAPI = async () => {\n        this.setState({errorMessage : '', res : ''});\n        const data = {\n            email : this.state.email,\n            password : this.state.password\n        };\n\n        const options = {\n            method : 'POST',\n            headers: { 'Content-Type':'application/json' },\n            body : JSON.stringify(data)\n        };\n\n        \n        //const req = new Request('http://localhost:7800/user/login', options);\n        const res = await fetch('http://localhost:7800/user/login', options);\n        const text = await res.text();\n        const status = await res.status;\n\n        if(status === 400){\n            this.setState({ errorMessage : text, email : '', password : '' });\n        }\n        else {\n            this.setState({ res : text });\n            console.log(text);\n            Router.pushRoute('/');\n        }\n        \n\n    }\n\n    onSubmit = async (event) => {\n        event.preventDefault();\n        this.callAPI();\n        console(\"Response : \", this.state.res);\n        const options = {\n            method : 'get',\n            headers: { 'Content-Type':'application/json', 'x-auth-token' : this.state.res },\n        };\n        const res = await fetch('http://localhost:7800/user/login/me', options);\n        const text = await JSON.stringify(res.text());\n        const status = await res.status;\n        console.log(text);\n        console.log(status);\n    }\n\n\n    showError = () => {\n        if(this.state.errorMessage === ''){\n            return null;\n        }\n        return <Message error header={this.state.errorMessage}></Message>;\n    }\n\n    render(){\n        return (\n            <Layout>\n                <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n                    <Grid.Column style={{ maxWidth: 450 }}>\n                    <Header as='h2' color='blue' textAlign='center'>\n                         Log-in to your account\n                    </Header>\n                    <Form size='large' onSubmit={this.onSubmit}>\n                        <Segment stacked>\n                        <Form.Input \n                            val = {this.state.email}\n                            onChange = { event => {this.setState({email : event.target.value})}} \n                            type = 'email'\n                            fluid \n                            icon='user' \n                            iconPosition='left' \n                            placeholder='E-mail address' />\n                        <Form.Input\n                            val = {this.state.password}\n                            onChange = { event => {this.setState({password : event.target.value})}} \n                            fluid\n                            icon='lock'\n                            iconPosition='left'\n                            placeholder='Password'\n                            type='password'\n                        />\n\n                        <Button color='blue' fluid size='large'>\n                            Login\n                        </Button>\n                        </Segment>\n                    </Form>\n                    <Message>\n                        New to us? <Link route='/user/register'><a>Sign Up</a></Link>\n                    </Message>   \n\n                    {this.showError()}\n                    </Grid.Column>\n                </Grid>\n            </Layout>\n        );\n    }\n\n}\n\nexport default LoginForm"]},"metadata":{},"sourceType":"module"}