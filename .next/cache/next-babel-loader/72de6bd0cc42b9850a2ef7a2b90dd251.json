{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport validate from '../../localmodules/token_validate';\nimport { Header, Table, Button } from 'semantic-ui-react';\nimport post from '../../localmodules/express_post';\nimport postWithData from '../../localmodules/express_post_data';\nimport Shop from '../../ethereum/shop';\n\nvar PreviousRecord = /*#__PURE__*/function (_Component) {\n  _inherits(PreviousRecord, _Component);\n\n  function PreviousRecord() {\n    _classCallCheck(this, PreviousRecord);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PreviousRecord).apply(this, arguments));\n  }\n\n  _createClass(PreviousRecord, [{\n    key: \"render\",\n    // renderTable() {\n    //     console.log(this.props.records);\n    //     const tableRows = this.props.records.map((item, index) => {\n    //         return (\n    //             <Table.Row key={index}>\n    //                 <Table.Cell>{this.props.records.length - index}</Table.Cell>\n    //                 <Table.Cell>{this.props.nameList[index]}</Table.Cell>\n    //                 <Table.Cell>{item.rice}</Table.Cell>\n    //                 <Table.Cell>{item.wheat}</Table.Cell>\n    //                 <Table.Cell>{item.arhad}</Table.Cell>\n    //                 <Table.Cell>{item.kerosene}</Table.Cell>\n    //                 <Table.Cell>{item.date}</Table.Cell>\n    //                 <Table.Cell>{item.orderid}</Table.Cell>\n    //             </Table.Row>\n    //         );\n    //     });\n    //     return (\n    //         <div>\n    //             <Table>\n    //                 <Table.Header>\n    //                     <Table.Row>\n    //                         <Table.HeaderCell>SLNO.</Table.HeaderCell>\n    //                         <Table.HeaderCell>Holder Name</Table.HeaderCell>\n    //                         <Table.HeaderCell>Rice</Table.HeaderCell>\n    //                         <Table.HeaderCell>Wheat</Table.HeaderCell>\n    //                         <Table.HeaderCell>Arhad</Table.HeaderCell>\n    //                         <Table.HeaderCell>Kerosene</Table.HeaderCell>\n    //                         <Table.HeaderCell>Date(Time)</Table.HeaderCell>\n    //                         <Table.HeaderCell>Order Id</Table.HeaderCell>\n    //                     </Table.Row>\n    //                 </Table.Header>\n    //                 <Table.Body>\n    //                     {tableRows.reverse()}\n    //                 </Table.Body>\n    //             </Table>\n    //         </div>\n    //     );\n    // }\n    value: function render() {\n      return __jsx(Layout, {\n        loggedIn: this.props.loggedIn,\n        headerToken: this.props.headerToken\n      }, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\",\n        style: {\n          color: '#2185d0'\n        }\n      }, \"RECORD TIMESTAMP\"), this.renderTable());\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var _validate, headerToken, loggedIn, address, shop, fpdNameValue, dataInp, headers, _ref, data, status, records, nameList;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _validate = validate(props.query.headerToken), headerToken = _validate.headerToken, loggedIn = _validate.loggedIn;\n              address = props.query.address;\n              console.log(address);\n              shop = Shop(address);\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(shop.methods.fpdName().call());\n\n            case 6:\n              fpdNameValue = _context.sent;\n              dataInp = {\n                fpdName: fpdNameValue\n              };\n              headers = {\n                'Content-Type': 'application/json'\n              };\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(postWithData('/record/record_list', headers, dataInp));\n\n            case 11:\n              _ref = _context.sent;\n              data = _ref.data;\n              status = _ref.status;\n              records = data['result'];\n              console.log(records);\n              nameList = []; // for(let i=0;i<records.length;i++){\n              //     const data = {\n              //         ration : records[i].ration\n              //     }\n              //     const headers = {\n              //         'Content-Type':'application/json'\n              //     };\n              //     const { text, status } = await post('/user/login/me/name', headers, data);\n              //     nameList[i] = text;\n              // }\n\n              console.log(nameList);\n              return _context.abrupt(\"return\", {\n                headerToken: headerToken,\n                loggedIn: loggedIn,\n                address: address\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return PreviousRecord;\n}(Component); // const recordLength = await shop.methods.recordCount().call();\n// const rice = await shop.methods.rice().call();\n// const wheat = await shop.methods.wheat().call();\n// const arhad = await shop.methods.arhad().call();\n// const kerosene = await shop.methods.kerosene().call();\n// console.log(rice, wheat, arhad, kerosene);\n// const records = await Promise.all(\n//     Array(parseInt(recordLength))\n//       .fill()\n//       .map((element, index) => {\n//         return shop.methods.recordList(index).call();\n//       })\n//   );\n\n\nexport { PreviousRecord as default };","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/pages/shops/record.js"],"names":["React","Component","Layout","validate","Header","Table","Button","post","postWithData","Shop","PreviousRecord","props","loggedIn","headerToken","color","renderTable","query","address","console","log","shop","methods","fpdName","call","fpdNameValue","dataInp","headers","data","status","records","nameList"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,MAAxB,QAAsC,mBAAtC;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;;IAGqBC,c;;;;;;;;;;;AAgCjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAES;AACL,aACI,MAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,QAA7B;AAAuC,QAAA,WAAW,EAAE,KAAKD,KAAL,CAAWE;AAA/D,SACI,MAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,SAAS,EAAC,QAA1B;AAAmC,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAC;AAAP;AAA1C,4BADJ,EAEK,KAAKC,WAAL,EAFL,CADJ;AAMH;;;oCA7E4BJ,K;;;;;;;0BACSR,QAAQ,CAACQ,KAAK,CAACK,KAAN,CAAYH,WAAb,C,EAAlCA,W,aAAAA,W,EAAaD,Q,aAAAA,Q;AACfK,cAAAA,O,GAAUN,KAAK,CAACK,KAAN,CAAYC,O;AAC5BC,cAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACMG,cAAAA,I,GAAOX,IAAI,CAACQ,OAAD,C;;+CAEUG,IAAI,CAACC,OAAL,CAAaC,OAAb,GAAuBC,IAAvB,E;;;AAArBC,cAAAA,Y;AACAC,cAAAA,O,GAAU;AACZH,gBAAAA,OAAO,EAAGE;AADE,e;AAGVE,cAAAA,O,GAAU;AAAE,gCAAe;AAAjB,e;;+CACalB,YAAY,CAAC,qBAAD,EAAwBkB,OAAxB,EAAiCD,OAAjC,C;;;;AAAlCE,cAAAA,I,QAAAA,I;AAAMC,cAAAA,M,QAAAA,M;AACPC,cAAAA,O,GAAUF,IAAI,CAAC,QAAD,C;AACpBT,cAAAA,OAAO,CAACC,GAAR,CAAYU,OAAZ;AACIC,cAAAA,Q,GAAW,E,EACf;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACAZ,cAAAA,OAAO,CAACC,GAAR,CAAYW,QAAZ;+CACO;AAAEjB,gBAAAA,WAAW,EAAXA,WAAF;AAAgBD,gBAAAA,QAAQ,EAARA,QAAhB;AAA0BK,gBAAAA,OAAO,EAAPA;AAA1B,e;;;;;;;;;;;;EA7B6BhB,S,GA6G5C;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SAzHaS,c","sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport validate from '../../localmodules/token_validate';\nimport { Header, Table, Button } from 'semantic-ui-react';\nimport post from '../../localmodules/express_post';\nimport postWithData from '../../localmodules/express_post_data';\nimport Shop from '../../ethereum/shop';\n\n\nexport default class PreviousRecord extends Component {\n\n    static async getInitialProps(props) {\n        const { headerToken, loggedIn } = validate(props.query.headerToken);\n        const address = props.query.address;\n        console.log(address);\n        const shop = Shop(address);\n        \n        const fpdNameValue = await shop.methods.fpdName().call();\n        const dataInp = {\n            fpdName : fpdNameValue\n        }\n        const headers = { 'Content-Type':'application/json'};\n        const {data, status} = await postWithData('/record/record_list', headers, dataInp)\n        const records = data['result'];\n        console.log(records);\n        let nameList = [];\n        // for(let i=0;i<records.length;i++){\n        //     const data = {\n        //         ration : records[i].ration\n        //     }\n        //     const headers = {\n        //         'Content-Type':'application/json'\n        //     };\n            \n        //     const { text, status } = await post('/user/login/me/name', headers, data);\n        //     nameList[i] = text;\n        // }\n        console.log(nameList);\n        return { headerToken , loggedIn, address };//, records, nameList } //, recordLength, rice, wheat, arhad, kerosene };\n    }\n\n    // renderTable() {\n\n    //     console.log(this.props.records);\n    //     const tableRows = this.props.records.map((item, index) => {\n    //         return (\n    //             <Table.Row key={index}>\n    //                 <Table.Cell>{this.props.records.length - index}</Table.Cell>\n    //                 <Table.Cell>{this.props.nameList[index]}</Table.Cell>\n    //                 <Table.Cell>{item.rice}</Table.Cell>\n    //                 <Table.Cell>{item.wheat}</Table.Cell>\n    //                 <Table.Cell>{item.arhad}</Table.Cell>\n    //                 <Table.Cell>{item.kerosene}</Table.Cell>\n    //                 <Table.Cell>{item.date}</Table.Cell>\n    //                 <Table.Cell>{item.orderid}</Table.Cell>\n    //             </Table.Row>\n    //         );\n    //     });\n    //     return (\n    //         <div>\n    //             <Table>\n    //                 <Table.Header>\n    //                     <Table.Row>\n    //                         <Table.HeaderCell>SLNO.</Table.HeaderCell>\n    //                         <Table.HeaderCell>Holder Name</Table.HeaderCell>\n    //                         <Table.HeaderCell>Rice</Table.HeaderCell>\n    //                         <Table.HeaderCell>Wheat</Table.HeaderCell>\n    //                         <Table.HeaderCell>Arhad</Table.HeaderCell>\n    //                         <Table.HeaderCell>Kerosene</Table.HeaderCell>\n    //                         <Table.HeaderCell>Date(Time)</Table.HeaderCell>\n    //                         <Table.HeaderCell>Order Id</Table.HeaderCell>\n    //                     </Table.Row>\n    //                 </Table.Header>\n    //                 <Table.Body>\n    //                     {tableRows.reverse()}\n    //                 </Table.Body>\n    //             </Table>\n    //         </div>\n    //     );\n    // }\n\n    render() {\n        return (\n            <Layout loggedIn={this.props.loggedIn} headerToken={this.props.headerToken}>\n                <Header as='h2' textAlign='center' style={{color:'#2185d0'}}>RECORD TIMESTAMP</Header>\n                {this.renderTable()}\n            </Layout>\n        );\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const recordLength = await shop.methods.recordCount().call();\n        // const rice = await shop.methods.rice().call();\n        // const wheat = await shop.methods.wheat().call();\n        // const arhad = await shop.methods.arhad().call();\n        // const kerosene = await shop.methods.kerosene().call();\n        // console.log(rice, wheat, arhad, kerosene);\n        // const records = await Promise.all(\n        //     Array(parseInt(recordLength))\n        //       .fill()\n        //       .map((element, index) => {\n        //         return shop.methods.recordList(index).call();\n        //       })\n        //   );"]},"metadata":{},"sourceType":"module"}