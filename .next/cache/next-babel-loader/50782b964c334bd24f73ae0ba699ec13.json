{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Comment, Header, Form, Button } from 'semantic-ui-react';\nimport postWithData from '../localmodules/express_post_data';\n\nvar CommentExampleComment = /*#__PURE__*/function (_Component) {\n  _inherits(CommentExampleComment, _Component);\n\n  function CommentExampleComment() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CommentExampleComment);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CommentExampleComment)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      currentComment: '',\n      data: null,\n      status: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getInit\", function _callee() {\n      var dataInp, headers, _ref, data, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(_this.props.fpdName);\n              dataInp = {\n                fpdName: _this.props.fpdName\n              };\n              headers = {\n                'Content-Type': 'application/json'\n              };\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(postWithData('/complaints/list', headers, dataInp));\n\n            case 5:\n              _ref = _context.sent;\n              data = _ref.data;\n              status = _ref.status;\n              return _context.abrupt(\"return\", {\n                data: data['record'],\n                status: status\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"postComplaint\", function (event) {\n      event.preventDefault();\n    });\n\n    return _this;\n  }\n\n  _createClass(CommentExampleComment, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount(props) {\n      var _ref2, data, status;\n\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log('name');\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(this.getInit());\n\n            case 3:\n              _ref2 = _context2.sent;\n              data = _ref2.data;\n              status = _ref2.status;\n              console.log(data);\n              this.setState({\n                data: data,\n                status: status\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    } // constructor(props){\n    //     super(props);\n    //     const { data, status } = this.getInit();\n    //     console.log(data, 'insideconstructor');\n    //     this.state = {\n    //         currentComment : '',\n    //         data,\n    //         status\n    //     }\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var d = ['a', 'b', 'c'];\n      var data = this.state.data;\n      console.log(data, d, 'inrender');\n      var comments = data.map(function (item, index) {\n        return __jsx(Comment, null, __jsx(Comment.Content, null, __jsx(Comment.Author, {\n          as: \"a\"\n        }, \"Matt\"), __jsx(Comment.Metadata, null, __jsx(\"div\", null, \"Today at 5:42PM\")), __jsx(Comment.Text, null, \"How artistic!\"), __jsx(Comment.Actions, null, __jsx(Comment.Action, null, \"Reply\"))));\n      });\n      return __jsx(Comment.Group, null, __jsx(Header, {\n        as: \"h3\",\n        dividing: true\n      }, \"Complaints\"), comments, __jsx(Form, {\n        reply: true,\n        onSubmit: this.postComplaint\n      }, __jsx(Form.TextArea, {\n        value: this.state.currentComment,\n        onChange: function onChange(e) {\n          return _this2.setState({\n            currentComment: e.target.value\n          });\n        }\n      }), __jsx(Button, {\n        content: \"Add Reply\",\n        labelPosition: \"left\",\n        icon: \"edit\",\n        primary: true\n      })));\n    }\n  }]);\n\n  return CommentExampleComment;\n}(Component);\n\nexport { CommentExampleComment as default };","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/components/complaint.js"],"names":["React","Component","Comment","Header","Form","Button","postWithData","CommentExampleComment","currentComment","data","status","console","log","props","fpdName","dataInp","headers","event","preventDefault","getInit","setState","d","state","comments","map","item","index","postComplaint","e","target","value"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,EAAgBC,MAAhB,EAAwBC,IAAxB,EAA8BC,MAA9B,QAA2C,mBAA3C;AACA,OAAOC,YAAP,MAAyB,mCAAzB;;IAEqBC,qB;;;;;;;;;;;;;;;;4DAET;AACJC,MAAAA,cAAc,EAAG,EADb;AAEJC,MAAAA,IAAI,EAAG,IAFH;AAGJC,MAAAA,MAAM,EAAG;AAHL,K;;8DAME;AAAA;;AAAA;AAAA;AAAA;AAAA;AACNC,cAAAA,OAAO,CAACC,GAAR,CAAa,MAAKC,KAAL,CAAWC,OAAxB;AACMC,cAAAA,OAFA,GAEU;AACZD,gBAAAA,OAAO,EAAG,MAAKD,KAAL,CAAWC;AADT,eAFV;AAKAE,cAAAA,OALA,GAKU;AAAE,gCAAe;AAAjB,eALV;AAAA;AAAA,+CAMuBV,YAAY,CAAC,kBAAD,EAAqBU,OAArB,EAA8BD,OAA9B,CANnC;;AAAA;AAAA;AAMCN,cAAAA,IAND,QAMCA,IAND;AAMOC,cAAAA,MANP,QAMOA,MANP;AAAA,+CAQC;AAAED,gBAAAA,IAAI,EAAGA,IAAI,CAAC,QAAD,CAAb;AAA0BC,gBAAAA,MAAM,EAANA;AAA1B,eARD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oEA6BM,UAACO,KAAD,EAAU;AACtBA,MAAAA,KAAK,CAACC,cAAN;AACH,K;;;;;;;sCApBuBL,K;;;;;;;AACpBF,cAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;+CAC+B,KAAKO,OAAL,E;;;;AAAvBV,cAAAA,I,SAAAA,I;AAAMC,cAAAA,M,SAAAA,M;AACdC,cAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,mBAAKW,QAAL,CAAc;AAAEX,gBAAAA,IAAI,EAAJA,IAAF;AAAQC,gBAAAA,MAAM,EAANA;AAAR,eAAd;;;;;;;;MAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;6BAMS;AAAA;;AACL,UAAMW,CAAC,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAV;AADK,UAEGZ,IAFH,GAEY,KAAKa,KAFjB,CAEGb,IAFH;AAGLE,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkBY,CAAlB,EAAqB,UAArB;AACA,UAAME,QAAQ,GAAGd,IAAI,CAACe,GAAL,CAAS,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACvC,eACI,MAAC,OAAD,QACI,MAAC,OAAD,CAAS,OAAT,QACA,MAAC,OAAD,CAAS,MAAT;AAAgB,UAAA,EAAE,EAAC;AAAnB,kBADA,EAEA,MAAC,OAAD,CAAS,QAAT,QACI,qCADJ,CAFA,EAKA,MAAC,OAAD,CAAS,IAAT,wBALA,EAMA,MAAC,OAAD,CAAS,OAAT,QACI,MAAC,OAAD,CAAS,MAAT,gBADJ,CANA,CADJ,CADJ;AAcH,OAfgB,CAAjB;AAiBA,aACI,MAAC,OAAD,CAAS,KAAT,QACA,MAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,QAAQ;AAAxB,sBADA,EAKCH,QALD,EAOA,MAAC,IAAD;AAAM,QAAA,KAAK,MAAX;AAAY,QAAA,QAAQ,EAAE,KAAKI;AAA3B,SACI,MAAC,IAAD,CAAM,QAAN;AACI,QAAA,KAAK,EAAE,KAAKL,KAAL,CAAWd,cADtB;AAEI,QAAA,QAAQ,EAAI,kBAACoB,CAAD;AAAA,iBAAO,MAAI,CAACR,QAAL,CAAc;AAACZ,YAAAA,cAAc,EAAGoB,CAAC,CAACC,MAAF,CAASC;AAA3B,WAAd,CAAP;AAAA;AAFhB,QADJ,EAKI,MAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,aAAa,EAAC,MAA1C;AAAiD,QAAA,IAAI,EAAC,MAAtD;AAA6D,QAAA,OAAO;AAApE,QALJ,CAPA,CADJ;AAiBH;;;;EA/E8C7B,S;;SAA9BM,qB","sourcesContent":["import React, {Component} from 'react';\nimport {Comment,Header, Form, Button} from 'semantic-ui-react';\nimport postWithData from '../localmodules/express_post_data';\n\nexport default class CommentExampleComment extends Component {\n\n    state = {\n        currentComment : '',\n        data : null,\n        status : null\n    }\n\n    getInit = async () =>{\n        console.log( this.props.fpdName );\n        const dataInp = {\n            fpdName : this.props.fpdName\n        }\n        const headers = { 'Content-Type':'application/json'};\n        const {data, status} = await postWithData('/complaints/list', headers, dataInp)\n        //console.log(data.record, 'insidemethods')\n        return { data : data['record'] , status };\n    }\n\n    async componentDidMount(props){\n        console.log('name');\n        const { data, status } = await this.getInit();\n        console.log(data);\n        this.setState({ data, status });\n     }\n\n    // constructor(props){\n    //     super(props);\n    //     const { data, status } = this.getInit();\n    //     console.log(data, 'insideconstructor');\n    //     this.state = {\n    //         currentComment : '',\n    //         data,\n    //         status\n    //     }\n    // }\n\n    postComplaint = (event) =>{\n        event.preventDefault();\n    }\n\n    render() {\n        const d = ['a', 'b', 'c'];\n        const { data } = this.state;\n        console.log(data, d, 'inrender');\n        const comments = data.map((item, index) => {\n            return (\n                <Comment>\n                    <Comment.Content>\n                    <Comment.Author as='a'>Matt</Comment.Author>\n                    <Comment.Metadata>\n                        <div>Today at 5:42PM</div>\n                    </Comment.Metadata>\n                    <Comment.Text>How artistic!</Comment.Text>\n                    <Comment.Actions>\n                        <Comment.Action>Reply</Comment.Action>\n                    </Comment.Actions>\n                    </Comment.Content>\n                </Comment>\n            );\n        });\n        \n        return (\n            <Comment.Group>\n            <Header as='h3' dividing>\n                Complaints\n            </Header>\n        \n            {comments}\n        \n            <Form reply onSubmit={this.postComplaint}>\n                <Form.TextArea \n                    value={this.state.currentComment}\n                    onChange = {(e) => this.setState({currentComment : e.target.value})}\n                />\n                <Button content='Add Reply' labelPosition='left' icon='edit' primary />\n            </Form>\n            </Comment.Group>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}