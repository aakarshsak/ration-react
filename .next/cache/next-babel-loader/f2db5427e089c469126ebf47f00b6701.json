{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport Shop from '../../ethereum/shop';\nimport { Card, Table, Grid, Button } from 'semantic-ui-react';\nimport { Link, Router } from '../../routes';\nimport validate from '../../localmodules/token_validate';\nimport get from '../../localmodules/express_get';\nimport web3 from '../../ethereum/web3';\n\nclass ShopShow extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"getAadhar\", async () => {\n      const headers = {\n        'Content-Type': 'application/json',\n        'x-auth-token': this.props.headerToken\n      };\n      const {\n        data,\n        status\n      } = await get('/user/login/me', headers);\n      return data.aadhar;\n    });\n\n    _defineProperty(this, \"onClick\", async () => {\n      const dateIns = new Date();\n      const date = dateIns.toLocaleDateString() + '(' + dateIns.getHours() + ':' + dateIns.getMinutes() + ')';\n      const threeDigit = 'OD4200' + Math.floor(Math.random() * Math.floor(1000));\n      const aadhar = await this.getAadhar();\n      const accounts = await web3.eth.getAccounts();\n      const s = Shop(this.props.address);\n      await s.methods.purchase(aadhar, threeDigit, date).send({\n        from: accounts[0]\n      });\n    });\n  }\n\n  static async getInitialProps(props) {\n    const {\n      headerToken,\n      loggedIn\n    } = validate(props.query.headerToken);\n    const headers = {\n      'Content-Type': 'application/json',\n      'x-auth-token': headerToken\n    };\n    const {\n      data,\n      status\n    } = await get('/user/login/me/blockName', headers);\n    const address = props.query.address;\n    const s = Shop(address);\n    const details = await s.methods.getDetails().call();\n    const blockName = await s.methods.blockName().call();\n    return {\n      managerName: details[0],\n      items: [{\n        quantity: details[1],\n        name: 'Rice',\n        price: '2'\n      }, {\n        quantity: details[2],\n        name: 'Wheat',\n        price: '4'\n      }, {\n        quantity: details[3],\n        name: 'Arhad',\n        price: '3'\n      }, {\n        quantity: details[4],\n        name: 'Kerosene',\n        price: '5'\n      }],\n      fpdName: details[5],\n      shopName: details[6],\n      manager: details[7],\n      addr: details[8],\n      currentAddress: address,\n      headerToken,\n      loggedIn,\n      blockName: data.area,\n      address\n    };\n  }\n\n  renderTable() {\n    const tableRows = this.props.items.map((item, index) => {\n      let maxQty = \"5 KG\";\n      if (item.name === 'Kerosene') maxQty = \"5 Litres\";\n      return __jsx(Table.Row, {\n        key: index\n      }, __jsx(Table.Cell, null, item.name), __jsx(Table.Cell, null, item.quantity), __jsx(Table.Cell, null, item.price), __jsx(Table.Cell, null));\n    });\n    return __jsx(\"div\", null, __jsx(\"h3\", null, __jsx(\"strong\", null, \"STOCK STATEMENT\")), __jsx(Table, null, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Item Name\"), __jsx(Table.HeaderCell, null, \"Stock\"), __jsx(Table.HeaderCell, null, \"Price(per KG)\"))), __jsx(Table.Body, null, tableRows)));\n  }\n\n  renderCard() {\n    const items = [{\n      header: this.props.shopName,\n      description: 'SHOP NAME',\n      meta: 'This is the name of the shop.'\n    }, {\n      header: this.props.fpdName,\n      description: 'FDP NUMBER',\n      meta: 'This is the name of the shop.'\n    }, {\n      header: this.props.managerName,\n      description: 'MANAGER NAME',\n      meta: 'This is the name of the shop.'\n    }];\n    return __jsx(\"div\", null, __jsx(Card.Group, {\n      items: items,\n      itemsPerRow: 3\n    }), __jsx(Card.Group, {\n      itemsPerRow: 2\n    }, __jsx(Card, null, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.addr), __jsx(Card.Meta, null, \"This is the name of the shop.\"), __jsx(Card.Description, null, \"SHOP ADDRESS\"))), __jsx(Card, null, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.blockName), __jsx(Card.Meta, null, \"This is the name of the block.\"), __jsx(Card.Description, null, \"BLOCK NAME\")))));\n  }\n\n  renderRecordButton() {\n    return __jsx(Link, {\n      route: `/${this.props.headerToken}/shops/record/${this.props.currentAddress}`\n    }, __jsx(\"a\", null, __jsx(Button, {\n      color: \"blue\"\n    }, \"View Previous Record Details\")));\n  }\n\n  renderButton() {\n    return __jsx(Button, {\n      color: \"blue\",\n      onClick: this.onClick\n    }, \"Make Payment\");\n  }\n\n  render() {\n    return __jsx(Layout, {\n      headerToken: this.props.headerToken,\n      loggedIn: this.props.loggedIn\n    }, __jsx(Grid, {\n      style: {\n        color: '#2185D0'\n      },\n      columns: 1\n    }, __jsx(Grid.Row, {\n      textAlign: \"center\"\n    }, __jsx(Grid.Column, null, this.renderTable())), __jsx(Grid.Row, {\n      textAlign: \"center\"\n    }, __jsx(Grid.Column, null, this.renderButton())), __jsx(Grid.Row, null, __jsx(Grid.Column, null, this.renderCard())), __jsx(Grid.Row, {\n      textAlign: \"center\"\n    }, __jsx(Grid.Column, null, this.renderRecordButton()))));\n  }\n\n}\n\nexport default ShopShow;","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/pages/shops/show.js"],"names":["React","Component","Layout","Shop","Card","Table","Grid","Button","Link","Router","validate","get","web3","ShopShow","headers","props","headerToken","data","status","aadhar","dateIns","Date","date","toLocaleDateString","getHours","getMinutes","threeDigit","Math","floor","random","getAadhar","accounts","eth","getAccounts","s","address","methods","purchase","send","from","getInitialProps","loggedIn","query","details","getDetails","call","blockName","managerName","items","quantity","name","price","fpdName","shopName","manager","addr","currentAddress","area","renderTable","tableRows","map","item","index","maxQty","renderCard","header","description","meta","renderRecordButton","renderButton","onClick","render","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport Shop from '../../ethereum/shop';\nimport { Card, Table, Grid, Button } from 'semantic-ui-react';\nimport {  Link, Router } from '../../routes';\nimport validate from '../../localmodules/token_validate';\nimport get from '../../localmodules/express_get';\nimport web3 from '../../ethereum/web3';\n\n\nclass ShopShow extends Component {\n\n    static async getInitialProps(props) {\n        const { headerToken, loggedIn } = validate(props.query.headerToken);\n        const headers = { 'Content-Type':'application/json', 'x-auth-token' : headerToken};\n        const {data, status} = await get('/user/login/me/blockName', headers);\n        const address = props.query.address;\n\n        const s = Shop(address);\n        const details = await s.methods.getDetails().call();\n        const blockName = await s.methods.blockName().call();\n        return { \n            managerName : details[0],\n            items : [{quantity : details[1], name : 'Rice', price : '2'},\n                    {quantity: details[2], name : 'Wheat', price : '4'},\n                    {quantity : details[3], name : 'Arhad', price : '3'},\n                    {quantity : details[4], name : 'Kerosene', price : '5'}],\n            fpdName : details[5],\n            shopName : details[6],\n            manager : details[7],\n            addr : details[8],\n            currentAddress : address,\n            headerToken,\n            loggedIn,\n            blockName : data.area,\n            address\n        };\n    }\n\n    renderTable() {\n        const tableRows = this.props.items.map((item, index) => {\n            let maxQty = \"5 KG\"\n            if(item.name === 'Kerosene')\n                maxQty = \"5 Litres\"\n            return (\n                <Table.Row key={index}>\n                    <Table.Cell>{item.name}</Table.Cell>\n                    <Table.Cell>{item.quantity}</Table.Cell>\n                    <Table.Cell>{item.price}</Table.Cell>\n                    <Table.Cell></Table.Cell>\n                </Table.Row>\n            );\n        });\n        return (\n            <div>\n                <h3><strong>STOCK STATEMENT</strong></h3>\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Item Name</Table.HeaderCell>\n                            <Table.HeaderCell>Stock</Table.HeaderCell>\n                            <Table.HeaderCell>Price(per KG)</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {tableRows}\n                    </Table.Body>\n                </Table>\n            </div>\n        );\n    }\n\n    renderCard() {\n        const items = [\n            {\n                header : this.props.shopName,\n                description : 'SHOP NAME',\n                meta : 'This is the name of the shop.'\n            },\n            {\n                header : this.props.fpdName,\n                description : 'FDP NUMBER',\n                meta : 'This is the name of the shop.'\n            },\n            {\n                header : this.props.managerName,\n                description : 'MANAGER NAME',\n                meta : 'This is the name of the shop.'\n            },\n        ];\n\n        return (\n            <div>\n                <Card.Group items = {items} itemsPerRow = {3}/>\n                    \n                <Card.Group itemsPerRow={2}>\n                    <Card>\n                        <Card.Content>\n                            <Card.Header>{this.props.addr}</Card.Header>\n                            <Card.Meta>This is the name of the shop.</Card.Meta>\n                            <Card.Description>SHOP ADDRESS</Card.Description>\n                        </Card.Content>\n                    </Card>\n                    <Card>\n                        <Card.Content>\n                            <Card.Header>{this.props.blockName}</Card.Header>\n                            <Card.Meta>This is the name of the block.</Card.Meta>\n                            <Card.Description>BLOCK NAME</Card.Description>\n                        </Card.Content>\n                    </Card>\n                </Card.Group>\n            </div>\n        );\n    }\n\n    renderRecordButton() {\n        return (\n\n            <Link route={`/${this.props.headerToken}/shops/record/${this.props.currentAddress}`}>\n                <a>\n                    <Button color='blue'>\n                    View Previous Record Details\n                    </Button>\n                </a>\n            </Link>\n\n        );\n    }\n\n    getAadhar = async () => {\n        const headers = { 'Content-Type':'application/json', 'x-auth-token' : this.props.headerToken};\n        const {data, status} = await get('/user/login/me', headers);\n        return data.aadhar;\n    }\n\n\n    onClick = async () => {\n        const dateIns = new Date;\n        const date = dateIns.toLocaleDateString() + '(' +dateIns.getHours() +':'+ dateIns.getMinutes() + ')';\n        const threeDigit = 'OD4200' + Math.floor(Math.random() * Math.floor(1000));\n        const aadhar = await this.getAadhar();\n        const accounts = await web3.eth.getAccounts();\n        const s = Shop(this.props.address);\n        await s.methods\n         .purchase(aadhar, threeDigit, date)\n         .send({\n             from : accounts[0]\n         });\n    }\n\n    renderButton(){\n        return (\n            <Button color='blue' onClick={this.onClick}>\n            Make Payment\n            </Button>\n    \n        );\n    }\n\n\n    render() {\n        return (\n            <Layout headerToken={this.props.headerToken} loggedIn={this.props.loggedIn}>\n                <Grid style={{color:'#2185D0'}} columns={1}>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderTable()}\n                        </Grid.Column>  \n                    </Grid.Row>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderButton()}\n                        </Grid.Column>  \n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            {this.renderCard()}\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderRecordButton()}\n                        </Grid.Column>  \n                    </Grid.Row>\n                    \n                </Grid>\n            </Layout>\n        );\n    }\n}\n\n\nexport default ShopShow;"]},"metadata":{},"sourceType":"module"}