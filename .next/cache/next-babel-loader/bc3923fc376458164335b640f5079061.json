{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport validate from '../../localmodules/token_validate';\nimport { Header, Table, Button } from 'semantic-ui-react';\nimport post from '../../localmodules/express_post';\nimport postWithData from '../../localmodules/express_post_data';\nimport Shop from '../../ethereum/shop';\n\nvar PreviousRecord = /*#__PURE__*/function (_Component) {\n  _inherits(PreviousRecord, _Component);\n\n  function PreviousRecord() {\n    _classCallCheck(this, PreviousRecord);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PreviousRecord).apply(this, arguments));\n  }\n\n  _createClass(PreviousRecord, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        loggedIn: this.props.loggedIn,\n        headerToken: this.props.headerToken\n      }, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\",\n        style: {\n          color: '#2185d0'\n        }\n      }, \"RECORD TIMESTAMP\"));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var _validate, headerToken, loggedIn, address, shop, fpdNameValue, dataInp, headers, _ref, data, status, records, nameList, i, _data, _headers, _ref2, text, _status;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _validate = validate(props.query.headerToken), headerToken = _validate.headerToken, loggedIn = _validate.loggedIn;\n              address = props.query.address;\n              shop = Shop(address); // const recordLength = await shop.methods.recordCount().call();\n              // const rice = await shop.methods.rice().call();\n              // const wheat = await shop.methods.wheat().call();\n              // const arhad = await shop.methods.arhad().call();\n              // const kerosene = await shop.methods.kerosene().call();\n              // console.log(rice, wheat, arhad, kerosene);\n              // const records = await Promise.all(\n              //     Array(parseInt(recordLength))\n              //       .fill()\n              //       .map((element, index) => {\n              //         return shop.methods.recordList(index).call();\n              //       })\n              //   );\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(shop.methods.fpdName().call());\n\n            case 5:\n              fpdNameValue = _context.sent;\n              dataInp = {\n                fpdName: fpdNameValue\n              };\n              headers = {\n                'Content-Type': 'application/json'\n              };\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(postWithData('/record/record_list', headers, dataInp));\n\n            case 10:\n              _ref = _context.sent;\n              data = _ref.data;\n              status = _ref.status;\n              records = data['result'];\n              console.log(records);\n              nameList = [];\n              i = 0;\n\n            case 17:\n              if (!(i < records.length)) {\n                _context.next = 29;\n                break;\n              }\n\n              _data = {\n                ration: records[i].ration\n              };\n              _headers = {\n                'Content-Type': 'application/json'\n              };\n              _context.next = 22;\n              return _regeneratorRuntime.awrap(post('/user/login/me/name', _headers, _data));\n\n            case 22:\n              _ref2 = _context.sent;\n              text = _ref2.text;\n              _status = _ref2.status;\n              nameList[i] = text;\n\n            case 26:\n              i++;\n              _context.next = 17;\n              break;\n\n            case 29:\n              console.log(nameList);\n              return _context.abrupt(\"return\", {\n                headerToken: headerToken,\n                loggedIn: loggedIn,\n                address: address,\n                records: records,\n                nameList: nameList\n              });\n\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return PreviousRecord;\n}(Component);\n\nexport { PreviousRecord as default };","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/pages/shops/record.js"],"names":["React","Component","Layout","validate","Header","Table","Button","post","postWithData","Shop","PreviousRecord","props","loggedIn","headerToken","color","query","address","shop","methods","fpdName","call","fpdNameValue","dataInp","headers","data","status","records","console","log","nameList","i","length","ration","text"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,MAAxB,QAAsC,mBAAtC;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;;IAGqBC,c;;;;;;;;;;;6BA4CR;AACL,aACI,MAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,QAA7B;AAAuC,QAAA,WAAW,EAAE,KAAKD,KAAL,CAAWE;AAA/D,SACI,MAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,SAAS,EAAC,QAA1B;AAAmC,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAC;AAAP;AAA1C,4BADJ,CADJ;AAMH;;;oCAjD4BH,K;;;;;;;0BACSR,QAAQ,CAACQ,KAAK,CAACI,KAAN,CAAYF,WAAb,C,EAAlCA,W,aAAAA,W,EAAaD,Q,aAAAA,Q;AACfI,cAAAA,O,GAAUL,KAAK,CAACI,KAAN,CAAYC,O;AACtBC,cAAAA,I,GAAOR,IAAI,CAACO,OAAD,C,EACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;+CAC2BC,IAAI,CAACC,OAAL,CAAaC,OAAb,GAAuBC,IAAvB,E;;;AAArBC,cAAAA,Y;AACAC,cAAAA,O,GAAU;AACZH,gBAAAA,OAAO,EAAGE;AADE,e;AAGVE,cAAAA,O,GAAU;AAAE,gCAAe;AAAjB,e;;+CACaf,YAAY,CAAC,qBAAD,EAAwBe,OAAxB,EAAiCD,OAAjC,C;;;;AAAlCE,cAAAA,I,QAAAA,I;AAAMC,cAAAA,M,QAAAA,M;AACPC,cAAAA,O,GAAUF,IAAI,CAAC,QAAD,C;AACpBG,cAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACIG,cAAAA,Q,GAAW,E;AACPC,cAAAA,C,GAAE,C;;;oBAAEA,CAAC,GAACJ,OAAO,CAACK,M;;;;;AACZP,cAAAA,K,GAAO;AACTQ,gBAAAA,MAAM,EAAGN,OAAO,CAACI,CAAD,CAAP,CAAWE;AADX,e;AAGPT,cAAAA,Q,GAAU;AACZ,gCAAe;AADH,e;;+CAIehB,IAAI,CAAC,qBAAD,EAAwBgB,QAAxB,EAAiCC,KAAjC,C;;;;AAA3BS,cAAAA,I,SAAAA,I;AAAMR,cAAAA,O,SAAAA,M;AACdI,cAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcG,IAAd;;;AATyBH,cAAAA,CAAC,E;;;;;AAW9BH,cAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;+CACO;AAAEhB,gBAAAA,WAAW,EAAXA,WAAF;AAAgBD,gBAAAA,QAAQ,EAARA,QAAhB;AAA0BI,gBAAAA,OAAO,EAAPA,OAA1B;AAAmCU,gBAAAA,OAAO,EAAPA,OAAnC;AAA4CG,gBAAAA,QAAQ,EAARA;AAA5C,e;;;;;;;;;;;;EAxC6B5B,S;;SAAvBS,c","sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport validate from '../../localmodules/token_validate';\nimport { Header, Table, Button } from 'semantic-ui-react';\nimport post from '../../localmodules/express_post';\nimport postWithData from '../../localmodules/express_post_data';\nimport Shop from '../../ethereum/shop';\n\n\nexport default class PreviousRecord extends Component {\n\n    static async getInitialProps(props) {\n        const { headerToken, loggedIn } = validate(props.query.headerToken);\n        const address = props.query.address;\n        const shop = Shop(address);\n        // const recordLength = await shop.methods.recordCount().call();\n        // const rice = await shop.methods.rice().call();\n        // const wheat = await shop.methods.wheat().call();\n        // const arhad = await shop.methods.arhad().call();\n        // const kerosene = await shop.methods.kerosene().call();\n        // console.log(rice, wheat, arhad, kerosene);\n        // const records = await Promise.all(\n        //     Array(parseInt(recordLength))\n        //       .fill()\n        //       .map((element, index) => {\n        //         return shop.methods.recordList(index).call();\n        //       })\n        //   );\n        const fpdNameValue = await shop.methods.fpdName().call();\n        const dataInp = {\n            fpdName : fpdNameValue\n        }\n        const headers = { 'Content-Type':'application/json'};\n        const {data, status} = await postWithData('/record/record_list', headers, dataInp)\n        const records = data['result'];\n        console.log(records);\n        let nameList = [];\n        for(let i=0;i<records.length;i++){\n            const data = {\n                ration : records[i].ration\n            }\n            const headers = {\n                'Content-Type':'application/json'\n            };\n            \n            const { text, status } = await post('/user/login/me/name', headers, data);\n            nameList[i] = text;\n        }\n        console.log(nameList);\n        return { headerToken , loggedIn, address, records, nameList } //, recordLength, rice, wheat, arhad, kerosene };\n    }\n\n\n    render() {\n        return (\n            <Layout loggedIn={this.props.loggedIn} headerToken={this.props.headerToken}>\n                <Header as='h2' textAlign='center' style={{color:'#2185d0'}}>RECORD TIMESTAMP</Header>\n                {/* {this.renderTable()} */}\n            </Layout>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}