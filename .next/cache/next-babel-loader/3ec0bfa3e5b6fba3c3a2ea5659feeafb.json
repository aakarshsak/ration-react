{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport Shop from '../../ethereum/shop';\nimport { Card, Table, Grid, Button, Input, Message } from 'semantic-ui-react';\nimport { Link, Router } from '../../routes';\nimport validate from '../../localmodules/token_validate';\nimport get from '../../localmodules/express_get';\nimport web3 from '../../ethereum/web3';\nimport CustomError from '../../localmodules/custom_error';\nimport post from '../../localmodules/express_post';\n\nclass ShopShow extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      rice: '',\n      wheat: '',\n      arhad: '',\n      kerosene: '',\n      tableError: '',\n      status: '',\n      cards: __jsx(Grid.Row, null, __jsx(Grid.Column, null, this.renderCard()))\n    });\n\n    _defineProperty(this, \"getRation\", async () => {\n      const headers = {\n        'Content-Type': 'application/json',\n        'x-auth-token': this.props.headerToken\n      };\n      const {\n        data,\n        status\n      } = await get('/user/login/me', headers);\n      return data.ration;\n    });\n\n    _defineProperty(this, \"verifyCurrent\", () => {\n      const qty = this.state;\n      let msg = '';\n      let count = 0;\n\n      if (qty.rice > 5) {\n        msg = msg + \"Rice\";\n        count++;\n      }\n\n      if (qty.wheat > 5) {\n        msg = msg + \", Wheat\";\n        if (count === 0) msg = 'Wheat';\n        count++;\n      }\n\n      if (qty.arhad > 5) {\n        msg = msg + \", Arhad\";\n        if (count === 0) msg = 'Arhad';\n        count++;\n      }\n\n      if (qty.kerosene > 5) {\n        msg = msg + \", Kerosene\";\n        if (count === 0) msg = 'Kerosene';\n        count++;\n      }\n\n      if (count > 0) {\n        throw new CustomError(`Quantity of ${msg} exceeds the maximum quantity allowed per month.`);\n      }\n    });\n\n    _defineProperty(this, \"verifyPrevious\", async () => {\n      const dateIns = new Date();\n      const date = dateIns.toLocaleDateString() + '(' + dateIns.getHours() + ':' + dateIns.getMinutes() + ')';\n      const threeDigit = 'OD20M05' + this.props.blockName.substring(0, 3) + Math.floor(Math.random() * Math.floor(1000));\n      const ration = await this.getRation();\n      const data = {\n        rice: this.state.rice,\n        wheat: this.state.wheat,\n        arhad: this.state.arhad,\n        kerosene: this.state.kerosene,\n        ration: ration,\n        date: date,\n        orderid: threeDigit,\n        fpdName: this.props.fpdName\n      };\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      const {\n        text,\n        status\n      } = await post('/record/verify', headers, data);\n      console.log(status, \"Func\");\n\n      if (status === 400) {\n        this.setState({\n          status\n        });\n        throw new CustomError(text);\n      }\n    });\n\n    _defineProperty(this, \"saveToMongo\", async () => {\n      const dateIns = new Date();\n      const date = dateIns.toLocaleDateString() + '(' + dateIns.getHours() + ':' + dateIns.getMinutes() + ')';\n      const threeDigit = 'OD20M05' + this.props.blockName.substring(0, 3) + Math.floor(Math.random() * Math.floor(1000));\n      const ration = await this.getRation();\n      const data = {\n        rice: this.state.rice,\n        wheat: this.state.wheat,\n        arhad: this.state.arhad,\n        kerosene: this.state.kerosene,\n        ration: ration,\n        date: date,\n        orderid: threeDigit,\n        fpdName: this.props.fpdName\n      };\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      const {\n        text,\n        status\n      } = await post('/record', headers, data);\n\n      if (status !== 400) {\n        this.setState({\n          tableError: 'Success'\n        });\n      }\n    });\n\n    _defineProperty(this, \"onClick\", async () => {\n      try {\n        this.setState({\n          tableError: ''\n        });\n        this.verifyCurrent();\n        await this.verifyPrevious();\n        console.log(this.state.status);\n\n        if (!(this.state.status === 400)) {\n          const dateIns = new Date();\n          const date = dateIns.toLocaleDateString() + '(' + dateIns.getHours() + ':' + dateIns.getMinutes() + ')';\n          const threeDigit = 'OD20M05' + this.props.blockName.substring(0, 3) + Math.floor(Math.random() * Math.floor(1000));\n          const ration = await this.getRation();\n          const accounts = await web3.eth.getAccounts();\n          const s = Shop(this.props.address);\n          await s.methods.purchase(ration, threeDigit, date, this.state.kerosene, this.state.rice, this.state.wheat, this.state.arhad).send({\n            from: accounts[0],\n            value: web3.utils.toWei('72', 'wei')\n          });\n          this.saveToMongo();\n        }\n      } catch (e) {\n        this.setState({\n          tableError: e.message\n        });\n      }\n    });\n\n    _defineProperty(this, \"onComplaintButtonClick\", event => {\n      this.setState({\n        cards: __jsx(\"div\", null, \"This is a ard\")\n      });\n    });\n\n    _defineProperty(this, \"renderComplaintButton\", () => {\n      return __jsx(Button, {\n        color: \"blue\",\n        onClick: this.onComplaintButtonClick\n      }, \"Make Complaint\");\n    });\n  }\n\n  static async getInitialProps(props) {\n    const {\n      headerToken,\n      loggedIn\n    } = validate(props.query.headerToken);\n    const headers = {\n      'Content-Type': 'application/json',\n      'x-auth-token': headerToken\n    };\n    const {\n      data,\n      status\n    } = await get('/user/login/me/blockName', headers);\n    const address = props.query.address;\n    const s = Shop(address);\n    const details = await s.methods.getDetails().call();\n    return {\n      managerName: details[0],\n      items: [{\n        quantity: details[1],\n        name: 'Rice',\n        price: '2'\n      }, {\n        quantity: details[2],\n        name: 'Wheat',\n        price: '4'\n      }, {\n        quantity: details[3],\n        name: 'Arhad',\n        price: '3'\n      }, {\n        quantity: details[4],\n        name: 'Kerosene',\n        price: '5'\n      }],\n      fpdName: details[5],\n      shopName: details[6],\n      manager: details[7],\n      addr: details[8],\n      currentAddress: address,\n      headerToken,\n      loggedIn,\n      blockName: data.area,\n      address\n    };\n  }\n\n  renderTable() {\n    const items = this.props.items;\n\n    const tableRows = __jsx(Table.Body, null, __jsx(Table.Row, null, __jsx(Table.Cell, null, items[0].name), __jsx(Table.Cell, null, items[0].quantity), __jsx(Table.Cell, null, items[0].price), __jsx(Table.Cell, null, \"5 Kg\"), __jsx(Table.Cell, null, __jsx(Input, {\n      type: \"number\",\n      placeholder: \"Quantity\",\n      value: this.state.rice,\n      onChange: event => this.setState({\n        rice: event.target.value\n      })\n    }))), __jsx(Table.Row, null, __jsx(Table.Cell, null, items[1].name), __jsx(Table.Cell, null, items[1].quantity), __jsx(Table.Cell, null, items[1].price), __jsx(Table.Cell, null, \"5 Kg\"), __jsx(Table.Cell, null, __jsx(Input, {\n      type: \"number\",\n      placeholder: \"Quantity\",\n      value: this.state.wheat,\n      onChange: event => this.setState({\n        wheat: event.target.value\n      })\n    }))), __jsx(Table.Row, null, __jsx(Table.Cell, null, items[2].name), __jsx(Table.Cell, null, items[2].quantity), __jsx(Table.Cell, null, items[2].price), __jsx(Table.Cell, null, \"5 Kg\"), __jsx(Table.Cell, null, __jsx(Input, {\n      type: \"number\",\n      placeholder: \"Quantity\",\n      value: this.state.arhad,\n      onChange: event => this.setState({\n        arhad: event.target.value\n      })\n    }))), __jsx(Table.Row, null, __jsx(Table.Cell, null, items[3].name), __jsx(Table.Cell, null, items[3].quantity), __jsx(Table.Cell, null, items[3].price), __jsx(Table.Cell, null, \"5 ltr\"), __jsx(Table.Cell, null, __jsx(Input, {\n      type: \"number\",\n      placeholder: \"Quantity\",\n      value: this.state.kerosene,\n      onChange: event => this.setState({\n        kerosene: event.target.value\n      })\n    }))));\n\n    return __jsx(\"div\", null, __jsx(\"h3\", null, __jsx(\"strong\", null, \"STOCK STATEMENT\")), __jsx(Table, null, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Item Name\"), __jsx(Table.HeaderCell, null, \"Stock\"), __jsx(Table.HeaderCell, null, \"Price(per KG)\"), __jsx(Table.HeaderCell, null, \"Maximum Quantity Per Month\"), __jsx(Table.HeaderCell, null, \"Buying Quantity\"))), tableRows), this.renderTableError());\n  }\n\n  renderCard() {\n    const items = [{\n      header: this.props.shopName,\n      description: 'SHOP NAME',\n      meta: 'This is the name of the shop.'\n    }, {\n      header: this.props.fpdName,\n      description: 'FDP NUMBER',\n      meta: 'This is the name of the shop.'\n    }, {\n      header: this.props.managerName,\n      description: 'MANAGER NAME',\n      meta: 'This is the name of the shop.'\n    }];\n    return __jsx(\"div\", null, __jsx(Card.Group, {\n      items: items,\n      itemsPerRow: 3\n    }), __jsx(Card.Group, {\n      itemsPerRow: 2\n    }, __jsx(Card, null, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.addr), __jsx(Card.Meta, null, \"This is the name of the shop.\"), __jsx(Card.Description, null, \"SHOP ADDRESS\"))), __jsx(Card, null, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.blockName), __jsx(Card.Meta, null, \"This is the name of the block.\"), __jsx(Card.Description, null, \"BLOCK NAME\")))));\n  }\n\n  renderRecordButton() {\n    return __jsx(Link, {\n      route: `/${this.props.headerToken}/shops/record/${this.props.currentAddress}`\n    }, __jsx(\"a\", null, __jsx(Button, {\n      color: \"blue\"\n    }, \"View Previous Record Details\")));\n  }\n\n  renderTableError() {\n    if (this.state.tableError === '') return null;else if (this.state.tableError === 'Success') return __jsx(Message, {\n      color: \"green\"\n    }, 'Payment Successful.');\n    return __jsx(Message, {\n      color: \"red\"\n    }, this.state.tableError);\n  }\n\n  renderButton() {\n    return __jsx(Button, {\n      color: \"blue\",\n      onClick: this.onClick\n    }, \"Make Payment\");\n  }\n\n  render() {\n    return __jsx(Layout, {\n      headerToken: this.props.headerToken,\n      loggedIn: this.props.loggedIn\n    }, __jsx(Grid, {\n      style: {\n        color: '#2185D0'\n      },\n      columns: 1\n    }, __jsx(Grid.Row, {\n      textAlign: \"center\"\n    }, __jsx(Grid.Column, null, this.renderTable())), __jsx(Grid.Row, {\n      textAlign: \"center\"\n    }, __jsx(Grid.Column, null, this.renderButton())), this.state.cards, __jsx(Grid.Row, {\n      textAlign: \"center\"\n    }, __jsx(Grid.Column, null, this.renderRecordButton()), __jsx(Grid.Column, null, this.renderComplaintButton()))));\n  }\n\n}\n\nexport default ShopShow;","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/pages/shops/show.js"],"names":["React","Component","Layout","Shop","Card","Table","Grid","Button","Input","Message","Link","Router","validate","get","web3","CustomError","post","ShopShow","rice","wheat","arhad","kerosene","tableError","status","cards","renderCard","headers","props","headerToken","data","ration","qty","state","msg","count","dateIns","Date","date","toLocaleDateString","getHours","getMinutes","threeDigit","blockName","substring","Math","floor","random","getRation","orderid","fpdName","text","console","log","setState","verifyCurrent","verifyPrevious","accounts","eth","getAccounts","s","address","methods","purchase","send","from","value","utils","toWei","saveToMongo","e","message","event","onComplaintButtonClick","getInitialProps","loggedIn","query","details","getDetails","call","managerName","items","quantity","name","price","shopName","manager","addr","currentAddress","area","renderTable","tableRows","target","renderTableError","header","description","meta","renderRecordButton","renderButton","onClick","render","color","renderComplaintButton"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,MAA5B,EAAoCC,KAApC,EAA2CC,OAA3C,QAA0D,mBAA1D;AACA,SAAUC,IAAV,EAAgBC,MAAhB,QAA8B,cAA9B;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;;AAGA,MAAMC,QAAN,SAAuBhB,SAAvB,CAAiC;AAAA;AAAA;;AAAA,mCAErB;AACJiB,MAAAA,IAAI,EAAG,EADH;AAEJC,MAAAA,KAAK,EAAG,EAFJ;AAGJC,MAAAA,KAAK,EAAG,EAHJ;AAIJC,MAAAA,QAAQ,EAAG,EAJP;AAKJC,MAAAA,UAAU,EAAG,EALT;AAMJC,MAAAA,MAAM,EAAG,EANL;AAOJC,MAAAA,KAAK,EAAI,MAAC,IAAD,CAAM,GAAN,QACG,MAAC,IAAD,CAAM,MAAN,QACK,KAAKC,UAAL,EADL,CADH;AAPL,KAFqB;;AAAA,uCAuLjB,YAAY;AACpB,YAAMC,OAAO,GAAG;AAAE,wBAAe,kBAAjB;AAAqC,wBAAiB,KAAKC,KAAL,CAAWC;AAAjE,OAAhB;AACA,YAAM;AAACC,QAAAA,IAAD;AAAON,QAAAA;AAAP,UAAiB,MAAMV,GAAG,CAAC,gBAAD,EAAmBa,OAAnB,CAAhC;AACA,aAAOG,IAAI,CAACC,MAAZ;AACH,KA3L4B;;AAAA,2CA6Lb,MAAM;AAClB,YAAMC,GAAG,GAAG,KAAKC,KAAjB;AACA,UAAIC,GAAG,GAAG,EAAV;AACA,UAAIC,KAAK,GAAG,CAAZ;;AACA,UAAGH,GAAG,CAACb,IAAJ,GAAW,CAAd,EAAgB;AACZe,QAAAA,GAAG,GAAGA,GAAG,GAAC,MAAV;AACAC,QAAAA,KAAK;AACR;;AACD,UAAGH,GAAG,CAACZ,KAAJ,GAAY,CAAf,EAAiB;AACbc,QAAAA,GAAG,GAAGA,GAAG,GAAC,SAAV;AACA,YAAGC,KAAK,KAAI,CAAZ,EACID,GAAG,GAAG,OAAN;AACJC,QAAAA,KAAK;AACR;;AACD,UAAGH,GAAG,CAACX,KAAJ,GAAY,CAAf,EAAiB;AACba,QAAAA,GAAG,GAAGA,GAAG,GAAC,SAAV;AACA,YAAGC,KAAK,KAAK,CAAb,EACID,GAAG,GAAG,OAAN;AACJC,QAAAA,KAAK;AACR;;AACD,UAAGH,GAAG,CAACV,QAAJ,GAAe,CAAlB,EAAoB;AAChBY,QAAAA,GAAG,GAAGA,GAAG,GAAC,YAAV;AACA,YAAGC,KAAK,KAAK,CAAb,EACID,GAAG,GAAG,UAAN;AACJC,QAAAA,KAAK;AACR;;AACD,UAAIA,KAAK,GAAG,CAAZ,EAAc;AACV,cAAM,IAAInB,WAAJ,CAAiB,eAAckB,GAAI,kDAAnC,CAAN;AACH;AACJ,KA1N4B;;AAAA,4CAmOZ,YAAY;AACzB,YAAME,OAAO,GAAG,IAAIC,IAAJ,EAAhB;AACA,YAAMC,IAAI,GAAGF,OAAO,CAACG,kBAAR,KAA+B,GAA/B,GAAoCH,OAAO,CAACI,QAAR,EAApC,GAAwD,GAAxD,GAA6DJ,OAAO,CAACK,UAAR,EAA7D,GAAoF,GAAjG;AACA,YAAMC,UAAU,GAAG,YAAY,KAAKd,KAAL,CAAWe,SAAX,CAAqBC,SAArB,CAA+B,CAA/B,EAAiC,CAAjC,CAAZ,GAAkDC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAW,IAAX,CAA3B,CAArE;AACA,YAAMf,MAAM,GAAG,MAAM,KAAKiB,SAAL,EAArB;AACA,YAAMlB,IAAI,GAAG;AACTX,QAAAA,IAAI,EAAG,KAAKc,KAAL,CAAWd,IADT;AAETC,QAAAA,KAAK,EAAG,KAAKa,KAAL,CAAWb,KAFV;AAGTC,QAAAA,KAAK,EAAG,KAAKY,KAAL,CAAWZ,KAHV;AAITC,QAAAA,QAAQ,EAAG,KAAKW,KAAL,CAAWX,QAJb;AAKTS,QAAAA,MAAM,EAAGA,MALA;AAMTO,QAAAA,IAAI,EAAGA,IANE;AAOTW,QAAAA,OAAO,EAAGP,UAPD;AAQTQ,QAAAA,OAAO,EAAG,KAAKtB,KAAL,CAAWsB;AARZ,OAAb;AAWA,YAAMvB,OAAO,GAAG;AAAE,wBAAe;AAAjB,OAAhB;AACA,YAAM;AAACwB,QAAAA,IAAD;AAAO3B,QAAAA;AAAP,UAAiB,MAAMP,IAAI,CAAC,gBAAD,EAAmBU,OAAnB,EAA4BG,IAA5B,CAAjC;AACAsB,MAAAA,OAAO,CAACC,GAAR,CAAY7B,MAAZ,EAAoB,MAApB;;AACA,UAAGA,MAAM,KAAK,GAAd,EAAkB;AACd,aAAK8B,QAAL,CAAc;AAAC9B,UAAAA;AAAD,SAAd;AACA,cAAM,IAAIR,WAAJ,CAAgBmC,IAAhB,CAAN;AACH;AAEJ,KA3P4B;;AAAA,yCA6Pf,YAAW;AACrB,YAAMf,OAAO,GAAG,IAAIC,IAAJ,EAAhB;AACA,YAAMC,IAAI,GAAGF,OAAO,CAACG,kBAAR,KAA+B,GAA/B,GAAoCH,OAAO,CAACI,QAAR,EAApC,GAAwD,GAAxD,GAA6DJ,OAAO,CAACK,UAAR,EAA7D,GAAoF,GAAjG;AACA,YAAMC,UAAU,GAAG,YAAY,KAAKd,KAAL,CAAWe,SAAX,CAAqBC,SAArB,CAA+B,CAA/B,EAAiC,CAAjC,CAAZ,GAAkDC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAW,IAAX,CAA3B,CAArE;AACA,YAAMf,MAAM,GAAG,MAAM,KAAKiB,SAAL,EAArB;AACA,YAAMlB,IAAI,GAAG;AACTX,QAAAA,IAAI,EAAG,KAAKc,KAAL,CAAWd,IADT;AAETC,QAAAA,KAAK,EAAG,KAAKa,KAAL,CAAWb,KAFV;AAGTC,QAAAA,KAAK,EAAG,KAAKY,KAAL,CAAWZ,KAHV;AAITC,QAAAA,QAAQ,EAAG,KAAKW,KAAL,CAAWX,QAJb;AAKTS,QAAAA,MAAM,EAAGA,MALA;AAMTO,QAAAA,IAAI,EAAGA,IANE;AAOTW,QAAAA,OAAO,EAAGP,UAPD;AAQTQ,QAAAA,OAAO,EAAG,KAAKtB,KAAL,CAAWsB;AARZ,OAAb;AAUA,YAAMvB,OAAO,GAAG;AAAE,wBAAe;AAAjB,OAAhB;AACA,YAAM;AAACwB,QAAAA,IAAD;AAAO3B,QAAAA;AAAP,UAAiB,MAAMP,IAAI,CAAC,SAAD,EAAYU,OAAZ,EAAqBG,IAArB,CAAjC;;AACA,UAAGN,MAAM,KAAK,GAAd,EAAkB;AACd,aAAK8B,QAAL,CAAc;AAAE/B,UAAAA,UAAU,EAAG;AAAf,SAAd;AACH;AACJ,KAjR4B;;AAAA,qCAmRnB,YAAY;AAClB,UAAI;AACA,aAAK+B,QAAL,CAAc;AAAC/B,UAAAA,UAAU,EAAG;AAAd,SAAd;AACA,aAAKgC,aAAL;AACA,cAAM,KAAKC,cAAL,EAAN;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAL,CAAWT,MAAvB;;AACA,YAAG,EAAE,KAAKS,KAAL,CAAWT,MAAX,KAAsB,GAAxB,CAAH,EAAgC;AAC5B,gBAAMY,OAAO,GAAG,IAAIC,IAAJ,EAAhB;AACA,gBAAMC,IAAI,GAAGF,OAAO,CAACG,kBAAR,KAA+B,GAA/B,GAAoCH,OAAO,CAACI,QAAR,EAApC,GAAwD,GAAxD,GAA6DJ,OAAO,CAACK,UAAR,EAA7D,GAAoF,GAAjG;AACA,gBAAMC,UAAU,GAAG,YAAY,KAAKd,KAAL,CAAWe,SAAX,CAAqBC,SAArB,CAA+B,CAA/B,EAAiC,CAAjC,CAAZ,GAAkDC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAW,IAAX,CAA3B,CAArE;AACA,gBAAMf,MAAM,GAAG,MAAM,KAAKiB,SAAL,EAArB;AACA,gBAAMS,QAAQ,GAAG,MAAM1C,IAAI,CAAC2C,GAAL,CAASC,WAAT,EAAvB;AACA,gBAAMC,CAAC,GAAGxD,IAAI,CAAC,KAAKwB,KAAL,CAAWiC,OAAZ,CAAd;AACA,gBAAMD,CAAC,CAACE,OAAF,CACLC,QADK,CACIhC,MADJ,EACYW,UADZ,EACwBJ,IADxB,EAC8B,KAAKL,KAAL,CAAWX,QADzC,EACmD,KAAKW,KAAL,CAAWd,IAD9D,EACoE,KAAKc,KAAL,CAAWb,KAD/E,EACsF,KAAKa,KAAL,CAAWZ,KADjG,EAEL2C,IAFK,CAEA;AACFC,YAAAA,IAAI,EAAGR,QAAQ,CAAC,CAAD,CADb;AAEFS,YAAAA,KAAK,EAAEnD,IAAI,CAACoD,KAAL,CAAWC,KAAX,CAAiB,IAAjB,EAAuB,KAAvB;AAFL,WAFA,CAAN;AAMA,eAAKC,WAAL;AACH;AAEJ,OArBD,CAqBE,OAAMC,CAAN,EAAS;AACP,aAAKhB,QAAL,CAAc;AAAC/B,UAAAA,UAAU,EAAG+C,CAAC,CAACC;AAAhB,SAAd;AACH;AACJ,KA5S4B;;AAAA,oDAuTHC,KAAD,IAAW;AAChC,WAAKlB,QAAL,CAAc;AAAC7B,QAAAA,KAAK,EAAG;AAAT,OAAd;AACH,KAzT4B;;AAAA,mDA2TL,MAAM;AAC1B,aACI,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,OAAO,EAAE,KAAKgD;AAAnC,0BADJ;AAKH,KAjU4B;AAAA;;AAgB7B,eAAaC,eAAb,CAA6B9C,KAA7B,EAAoC;AAChC,UAAM;AAAEC,MAAAA,WAAF;AAAe8C,MAAAA;AAAf,QAA4B9D,QAAQ,CAACe,KAAK,CAACgD,KAAN,CAAY/C,WAAb,CAA1C;AACA,UAAMF,OAAO,GAAG;AAAE,sBAAe,kBAAjB;AAAqC,sBAAiBE;AAAtD,KAAhB;AACA,UAAM;AAACC,MAAAA,IAAD;AAAON,MAAAA;AAAP,QAAiB,MAAMV,GAAG,CAAC,0BAAD,EAA6Ba,OAA7B,CAAhC;AACA,UAAMkC,OAAO,GAAGjC,KAAK,CAACgD,KAAN,CAAYf,OAA5B;AAEA,UAAMD,CAAC,GAAGxD,IAAI,CAACyD,OAAD,CAAd;AACA,UAAMgB,OAAO,GAAG,MAAMjB,CAAC,CAACE,OAAF,CAAUgB,UAAV,GAAuBC,IAAvB,EAAtB;AACA,WAAO;AACHC,MAAAA,WAAW,EAAGH,OAAO,CAAC,CAAD,CADlB;AAEHI,MAAAA,KAAK,EAAG,CAAC;AAACC,QAAAA,QAAQ,EAAGL,OAAO,CAAC,CAAD,CAAnB;AAAwBM,QAAAA,IAAI,EAAG,MAA/B;AAAuCC,QAAAA,KAAK,EAAG;AAA/C,OAAD,EACA;AAACF,QAAAA,QAAQ,EAAEL,OAAO,CAAC,CAAD,CAAlB;AAAuBM,QAAAA,IAAI,EAAG,OAA9B;AAAuCC,QAAAA,KAAK,EAAG;AAA/C,OADA,EAEA;AAACF,QAAAA,QAAQ,EAAGL,OAAO,CAAC,CAAD,CAAnB;AAAwBM,QAAAA,IAAI,EAAG,OAA/B;AAAwCC,QAAAA,KAAK,EAAG;AAAhD,OAFA,EAGA;AAACF,QAAAA,QAAQ,EAAGL,OAAO,CAAC,CAAD,CAAnB;AAAwBM,QAAAA,IAAI,EAAG,UAA/B;AAA2CC,QAAAA,KAAK,EAAG;AAAnD,OAHA,CAFL;AAMHlC,MAAAA,OAAO,EAAG2B,OAAO,CAAC,CAAD,CANd;AAOHQ,MAAAA,QAAQ,EAAGR,OAAO,CAAC,CAAD,CAPf;AAQHS,MAAAA,OAAO,EAAGT,OAAO,CAAC,CAAD,CARd;AASHU,MAAAA,IAAI,EAAGV,OAAO,CAAC,CAAD,CATX;AAUHW,MAAAA,cAAc,EAAG3B,OAVd;AAWHhC,MAAAA,WAXG;AAYH8C,MAAAA,QAZG;AAaHhC,MAAAA,SAAS,EAAGb,IAAI,CAAC2D,IAbd;AAcH5B,MAAAA;AAdG,KAAP;AAgBH;;AAED6B,EAAAA,WAAW,GAAG;AACV,UAAMT,KAAK,GAAG,KAAKrD,KAAL,CAAWqD,KAAzB;;AACA,UAAMU,SAAS,GACX,MAAC,KAAD,CAAO,IAAP,QACI,MAAC,KAAD,CAAO,GAAP,QACI,MAAC,KAAD,CAAO,IAAP,QAAaV,KAAK,CAAC,CAAD,CAAL,CAASE,IAAtB,CADJ,EAEI,MAAC,KAAD,CAAO,IAAP,QAAaF,KAAK,CAAC,CAAD,CAAL,CAASC,QAAtB,CAFJ,EAGI,MAAC,KAAD,CAAO,IAAP,QAAaD,KAAK,CAAC,CAAD,CAAL,CAASG,KAAtB,CAHJ,EAII,MAAC,KAAD,CAAO,IAAP,eAJJ,EAKI,MAAC,KAAD,CAAO,IAAP,QACI,MAAC,KAAD;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,WAAW,EAAG,UAFlB;AAGI,MAAA,KAAK,EAAE,KAAKnD,KAAL,CAAWd,IAHtB;AAII,MAAA,QAAQ,EAAEqD,KAAK,IAAI,KAAKlB,QAAL,CAAc;AAAEnC,QAAAA,IAAI,EAAGqD,KAAK,CAACoB,MAAN,CAAa1B;AAAtB,OAAd;AAJvB,MADJ,CALJ,CADJ,EAeI,MAAC,KAAD,CAAO,GAAP,QACA,MAAC,KAAD,CAAO,IAAP,QAAae,KAAK,CAAC,CAAD,CAAL,CAASE,IAAtB,CADA,EAEI,MAAC,KAAD,CAAO,IAAP,QAAaF,KAAK,CAAC,CAAD,CAAL,CAASC,QAAtB,CAFJ,EAGI,MAAC,KAAD,CAAO,IAAP,QAAaD,KAAK,CAAC,CAAD,CAAL,CAASG,KAAtB,CAHJ,EAII,MAAC,KAAD,CAAO,IAAP,eAJJ,EAKI,MAAC,KAAD,CAAO,IAAP,QACI,MAAC,KAAD;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,WAAW,EAAG,UAFlB;AAGI,MAAA,KAAK,EAAE,KAAKnD,KAAL,CAAWb,KAHtB;AAII,MAAA,QAAQ,EAAEoD,KAAK,IAAI,KAAKlB,QAAL,CAAc;AAAElC,QAAAA,KAAK,EAAGoD,KAAK,CAACoB,MAAN,CAAa1B;AAAvB,OAAd;AAJvB,MADJ,CALJ,CAfJ,EA6BI,MAAC,KAAD,CAAO,GAAP,QACA,MAAC,KAAD,CAAO,IAAP,QAAae,KAAK,CAAC,CAAD,CAAL,CAASE,IAAtB,CADA,EAEI,MAAC,KAAD,CAAO,IAAP,QAAaF,KAAK,CAAC,CAAD,CAAL,CAASC,QAAtB,CAFJ,EAGI,MAAC,KAAD,CAAO,IAAP,QAAaD,KAAK,CAAC,CAAD,CAAL,CAASG,KAAtB,CAHJ,EAII,MAAC,KAAD,CAAO,IAAP,eAJJ,EAKI,MAAC,KAAD,CAAO,IAAP,QACI,MAAC,KAAD;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,WAAW,EAAG,UAFlB;AAGI,MAAA,KAAK,EAAE,KAAKnD,KAAL,CAAWZ,KAHtB;AAII,MAAA,QAAQ,EAAEmD,KAAK,IAAI,KAAKlB,QAAL,CAAc;AAAEjC,QAAAA,KAAK,EAAGmD,KAAK,CAACoB,MAAN,CAAa1B;AAAvB,OAAd;AAJvB,MADJ,CALJ,CA7BJ,EA2CI,MAAC,KAAD,CAAO,GAAP,QACA,MAAC,KAAD,CAAO,IAAP,QAAae,KAAK,CAAC,CAAD,CAAL,CAASE,IAAtB,CADA,EAEI,MAAC,KAAD,CAAO,IAAP,QAAaF,KAAK,CAAC,CAAD,CAAL,CAASC,QAAtB,CAFJ,EAGI,MAAC,KAAD,CAAO,IAAP,QAAaD,KAAK,CAAC,CAAD,CAAL,CAASG,KAAtB,CAHJ,EAII,MAAC,KAAD,CAAO,IAAP,gBAJJ,EAKI,MAAC,KAAD,CAAO,IAAP,QACI,MAAC,KAAD;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,WAAW,EAAG,UAFlB;AAGI,MAAA,KAAK,EAAE,KAAKnD,KAAL,CAAWX,QAHtB;AAII,MAAA,QAAQ,EAAEkD,KAAK,IAAI,KAAKlB,QAAL,CAAc;AAAEhC,QAAAA,QAAQ,EAAGkD,KAAK,CAACoB,MAAN,CAAa1B;AAA1B,OAAd;AAJvB,MADJ,CALJ,CA3CJ,CADJ;;AA6DA,WACI,mBACI,kBAAI,wCAAJ,CADJ,EAEI,MAAC,KAAD,QACI,MAAC,KAAD,CAAO,MAAP,QACI,MAAC,KAAD,CAAO,GAAP,QACI,MAAC,KAAD,CAAO,UAAP,oBADJ,EAEI,MAAC,KAAD,CAAO,UAAP,gBAFJ,EAGI,MAAC,KAAD,CAAO,UAAP,wBAHJ,EAII,MAAC,KAAD,CAAO,UAAP,qCAJJ,EAKI,MAAC,KAAD,CAAO,UAAP,0BALJ,CADJ,CADJ,EAUKyB,SAVL,CAFJ,EAeK,KAAKE,gBAAL,EAfL,CADJ;AAmBH;;AAEDnE,EAAAA,UAAU,GAAG;AACT,UAAMuD,KAAK,GAAG,CACV;AACIa,MAAAA,MAAM,EAAG,KAAKlE,KAAL,CAAWyD,QADxB;AAEIU,MAAAA,WAAW,EAAG,WAFlB;AAGIC,MAAAA,IAAI,EAAG;AAHX,KADU,EAMV;AACIF,MAAAA,MAAM,EAAG,KAAKlE,KAAL,CAAWsB,OADxB;AAEI6C,MAAAA,WAAW,EAAG,YAFlB;AAGIC,MAAAA,IAAI,EAAG;AAHX,KANU,EAWV;AACIF,MAAAA,MAAM,EAAG,KAAKlE,KAAL,CAAWoD,WADxB;AAEIe,MAAAA,WAAW,EAAG,cAFlB;AAGIC,MAAAA,IAAI,EAAG;AAHX,KAXU,CAAd;AAkBA,WACI,mBACI,MAAC,IAAD,CAAM,KAAN;AAAY,MAAA,KAAK,EAAIf,KAArB;AAA4B,MAAA,WAAW,EAAI;AAA3C,MADJ,EAGI,MAAC,IAAD,CAAM,KAAN;AAAY,MAAA,WAAW,EAAE;AAAzB,OACI,MAAC,IAAD,QACI,MAAC,IAAD,CAAM,OAAN,QACI,MAAC,IAAD,CAAM,MAAN,QAAc,KAAKrD,KAAL,CAAW2D,IAAzB,CADJ,EAEI,MAAC,IAAD,CAAM,IAAN,wCAFJ,EAGI,MAAC,IAAD,CAAM,WAAN,uBAHJ,CADJ,CADJ,EAQI,MAAC,IAAD,QACI,MAAC,IAAD,CAAM,OAAN,QACI,MAAC,IAAD,CAAM,MAAN,QAAc,KAAK3D,KAAL,CAAWe,SAAzB,CADJ,EAEI,MAAC,IAAD,CAAM,IAAN,yCAFJ,EAGI,MAAC,IAAD,CAAM,WAAN,qBAHJ,CADJ,CARJ,CAHJ,CADJ;AAsBH;;AAEDsD,EAAAA,kBAAkB,GAAG;AACjB,WAEI,MAAC,IAAD;AAAM,MAAA,KAAK,EAAG,IAAG,KAAKrE,KAAL,CAAWC,WAAY,iBAAgB,KAAKD,KAAL,CAAW4D,cAAe;AAAlF,OACI,iBACI,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC;AAAd,sCADJ,CADJ,CAFJ;AAWH;;AAsCDK,EAAAA,gBAAgB,GAAE;AACd,QAAG,KAAK5D,KAAL,CAAWV,UAAX,KAA0B,EAA7B,EACI,OAAO,IAAP,CADJ,KAEK,IAAG,KAAKU,KAAL,CAAWV,UAAX,KAA0B,SAA7B,EACD,OAAO,MAAC,OAAD;AAAS,MAAA,KAAK,EAAC;AAAf,OAAwB,qBAAxB,CAAP;AACJ,WAAO,MAAC,OAAD;AAAS,MAAA,KAAK,EAAC;AAAf,OAAsB,KAAKU,KAAL,CAAWV,UAAjC,CAAP;AACH;;AA6ED2E,EAAAA,YAAY,GAAE;AACV,WACI,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAqB,MAAA,OAAO,EAAE,KAAKC;AAAnC,sBADJ;AAMH;;AAcDC,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,MAAD;AAAQ,MAAA,WAAW,EAAE,KAAKxE,KAAL,CAAWC,WAAhC;AAA6C,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAW+C;AAAlE,OACI,MAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAC0B,QAAAA,KAAK,EAAC;AAAP,OAAb;AAAgC,MAAA,OAAO,EAAE;AAAzC,OACI,MAAC,IAAD,CAAM,GAAN;AAAU,MAAA,SAAS,EAAC;AAApB,OACI,MAAC,IAAD,CAAM,MAAN,QACK,KAAKX,WAAL,EADL,CADJ,CADJ,EAMI,MAAC,IAAD,CAAM,GAAN;AAAU,MAAA,SAAS,EAAC;AAApB,OACI,MAAC,IAAD,CAAM,MAAN,QACK,KAAKQ,YAAL,EADL,CADJ,CANJ,EAWK,KAAKjE,KAAL,CAAWR,KAXhB,EAYI,MAAC,IAAD,CAAM,GAAN;AAAU,MAAA,SAAS,EAAC;AAApB,OACI,MAAC,IAAD,CAAM,MAAN,QACK,KAAKwE,kBAAL,EADL,CADJ,EAII,MAAC,IAAD,CAAM,MAAN,QACK,KAAKK,qBAAL,EADL,CAJJ,CAZJ,CADJ,CADJ;AA0BH;;AA9V4B;;AAkWjC,eAAepF,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport Shop from '../../ethereum/shop';\nimport { Card, Table, Grid, Button, Input, Message } from 'semantic-ui-react';\nimport {  Link, Router } from '../../routes';\nimport validate from '../../localmodules/token_validate';\nimport get from '../../localmodules/express_get';\nimport web3 from '../../ethereum/web3';\nimport CustomError from '../../localmodules/custom_error';\nimport post from '../../localmodules/express_post';\n\n\nclass ShopShow extends Component {\n\n    state = { \n        rice : '',\n        wheat : '',\n        arhad : '',\n        kerosene : '',\n        tableError : '',\n        status : '',\n        cards : (<Grid.Row>\n                    <Grid.Column>\n                        {this.renderCard()}\n                    </Grid.Column>\n                </Grid.Row>)\n    };\n\n    static async getInitialProps(props) {\n        const { headerToken, loggedIn } = validate(props.query.headerToken);\n        const headers = { 'Content-Type':'application/json', 'x-auth-token' : headerToken};\n        const {data, status} = await get('/user/login/me/blockName', headers);\n        const address = props.query.address;\n\n        const s = Shop(address);\n        const details = await s.methods.getDetails().call();\n        return { \n            managerName : details[0],\n            items : [{quantity : details[1], name : 'Rice', price : '2'},\n                    {quantity: details[2], name : 'Wheat', price : '4'},\n                    {quantity : details[3], name : 'Arhad', price : '3'},\n                    {quantity : details[4], name : 'Kerosene', price : '5'}],\n            fpdName : details[5],\n            shopName : details[6],\n            manager : details[7],\n            addr : details[8],\n            currentAddress : address,\n            headerToken,\n            loggedIn,\n            blockName : data.area,\n            address\n        };\n    }\n\n    renderTable() {\n        const items = this.props.items;\n        const tableRows = (\n            <Table.Body>\n                <Table.Row>\n                    <Table.Cell>{items[0].name}</Table.Cell>\n                    <Table.Cell>{items[0].quantity}</Table.Cell>\n                    <Table.Cell>{items[0].price}</Table.Cell>\n                    <Table.Cell>5 Kg</Table.Cell>\n                    <Table.Cell>\n                        <Input\n                            type='number'\n                            placeholder = 'Quantity'\n                            value={this.state.rice}\n                            onChange={event => this.setState({ rice : event.target.value })}\n                        />\n                    </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                <Table.Cell>{items[1].name}</Table.Cell>\n                    <Table.Cell>{items[1].quantity}</Table.Cell>\n                    <Table.Cell>{items[1].price}</Table.Cell>\n                    <Table.Cell>5 Kg</Table.Cell>\n                    <Table.Cell>\n                        <Input\n                            type='number'\n                            placeholder = 'Quantity'\n                            value={this.state.wheat}\n                            onChange={event => this.setState({ wheat : event.target.value })}\n                        />\n                    </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                <Table.Cell>{items[2].name}</Table.Cell>\n                    <Table.Cell>{items[2].quantity}</Table.Cell>\n                    <Table.Cell>{items[2].price}</Table.Cell>\n                    <Table.Cell>5 Kg</Table.Cell>\n                    <Table.Cell>\n                        <Input\n                            type='number'\n                            placeholder = 'Quantity'\n                            value={this.state.arhad}\n                            onChange={event => this.setState({ arhad : event.target.value })}\n                        />\n                    </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                <Table.Cell>{items[3].name}</Table.Cell>\n                    <Table.Cell>{items[3].quantity}</Table.Cell>\n                    <Table.Cell>{items[3].price}</Table.Cell>\n                    <Table.Cell>5 ltr</Table.Cell>\n                    <Table.Cell>\n                        <Input\n                            type='number'\n                            placeholder = 'Quantity'\n                            value={this.state.kerosene}\n                            onChange={event => this.setState({ kerosene : event.target.value })}\n                        />\n                    </Table.Cell>\n                </Table.Row>\n            </Table.Body>\n        );\n        \n        return (\n            <div>\n                <h3><strong>STOCK STATEMENT</strong></h3>\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Item Name</Table.HeaderCell>\n                            <Table.HeaderCell>Stock</Table.HeaderCell>\n                            <Table.HeaderCell>Price(per KG)</Table.HeaderCell>\n                            <Table.HeaderCell>Maximum Quantity Per Month</Table.HeaderCell>\n                            <Table.HeaderCell>Buying Quantity</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    {tableRows}\n                \n                </Table>\n                {this.renderTableError()}\n            </div>\n        );\n    }\n\n    renderCard() {\n        const items = [\n            {\n                header : this.props.shopName,\n                description : 'SHOP NAME',\n                meta : 'This is the name of the shop.'\n            },\n            {\n                header : this.props.fpdName,\n                description : 'FDP NUMBER',\n                meta : 'This is the name of the shop.'\n            },\n            {\n                header : this.props.managerName,\n                description : 'MANAGER NAME',\n                meta : 'This is the name of the shop.'\n            },\n        ];\n\n        return (\n            <div>\n                <Card.Group items = {items} itemsPerRow = {3}/>\n                    \n                <Card.Group itemsPerRow={2}>\n                    <Card>\n                        <Card.Content>\n                            <Card.Header>{this.props.addr}</Card.Header>\n                            <Card.Meta>This is the name of the shop.</Card.Meta>\n                            <Card.Description>SHOP ADDRESS</Card.Description>\n                        </Card.Content>\n                    </Card>\n                    <Card>\n                        <Card.Content>\n                            <Card.Header>{this.props.blockName}</Card.Header>\n                            <Card.Meta>This is the name of the block.</Card.Meta>\n                            <Card.Description>BLOCK NAME</Card.Description>\n                        </Card.Content>\n                    </Card>\n                </Card.Group>\n            </div>\n        );\n    }\n\n    renderRecordButton() {\n        return (\n\n            <Link route={`/${this.props.headerToken}/shops/record/${this.props.currentAddress}`}>\n                <a>\n                    <Button color='blue'>\n                    View Previous Record Details\n                    </Button>\n                </a>\n            </Link>\n\n        );\n    }\n\n    getRation = async () => {\n        const headers = { 'Content-Type':'application/json', 'x-auth-token' : this.props.headerToken};\n        const {data, status} = await get('/user/login/me', headers);\n        return data.ration;\n    }\n\n    verifyCurrent = () => {\n        const qty = this.state;\n        let msg = '';\n        let count = 0;\n        if(qty.rice > 5){\n            msg = msg+\"Rice\";\n            count++;\n        }\n        if(qty.wheat > 5){\n            msg = msg+\", Wheat\";\n            if(count ===0)\n                msg = 'Wheat'\n            count++;\n        }\n        if(qty.arhad > 5){\n            msg = msg+\", Arhad\";\n            if(count === 0)\n                msg = 'Arhad'\n            count++;\n        }\n        if(qty.kerosene > 5){\n            msg = msg+\", Kerosene\";\n            if(count === 0)\n                msg = 'Kerosene'\n            count++;\n        }\n        if( count > 0){\n            throw new CustomError(`Quantity of ${msg} exceeds the maximum quantity allowed per month.`);\n        }\n    }\n    renderTableError(){\n        if(this.state.tableError === '')\n            return null;\n        else if(this.state.tableError === 'Success')\n            return <Message color='green'>{'Payment Successful.'}</Message>;\n        return <Message color='red'>{this.state.tableError}</Message>;\n    }\n\n    verifyPrevious = async () => {\n        const dateIns = new Date;\n        const date = dateIns.toLocaleDateString() + '(' +dateIns.getHours() +':'+ dateIns.getMinutes() + ')';\n        const threeDigit = 'OD20M05' + this.props.blockName.substring(0,3) + Math.floor(Math.random() * Math.floor(1000));\n        const ration = await this.getRation();\n        const data = {\n            rice : this.state.rice,\n            wheat : this.state.wheat,\n            arhad : this.state.arhad,\n            kerosene : this.state.kerosene,\n            ration : ration,\n            date : date,\n            orderid : threeDigit,\n            fpdName : this.props.fpdName\n        };\n\n        const headers = { 'Content-Type':'application/json' };\n        const {text, status} = await post('/record/verify', headers, data);\n        console.log(status, \"Func\");\n        if(status === 400){\n            this.setState({status});\n            throw new CustomError(text);\n        }\n        \n    }\n\n    saveToMongo = async() => {\n        const dateIns = new Date;\n        const date = dateIns.toLocaleDateString() + '(' +dateIns.getHours() +':'+ dateIns.getMinutes() + ')';\n        const threeDigit = 'OD20M05' + this.props.blockName.substring(0,3) + Math.floor(Math.random() * Math.floor(1000));\n        const ration = await this.getRation();\n        const data = {\n            rice : this.state.rice,\n            wheat : this.state.wheat,\n            arhad : this.state.arhad,\n            kerosene : this.state.kerosene,\n            ration : ration,\n            date : date,\n            orderid : threeDigit,\n            fpdName : this.props.fpdName\n        };\n        const headers = { 'Content-Type':'application/json' };\n        const {text, status} = await post('/record', headers, data);\n        if(status !== 400){\n            this.setState({ tableError : 'Success' });\n        }\n    }\n\n    onClick = async () => {\n        try {\n            this.setState({tableError : ''});\n            this.verifyCurrent();\n            await this.verifyPrevious();\n            console.log(this.state.status);\n            if(!(this.state.status === 400)){\n                const dateIns = new Date;\n                const date = dateIns.toLocaleDateString() + '(' +dateIns.getHours() +':'+ dateIns.getMinutes() + ')';\n                const threeDigit = 'OD20M05' + this.props.blockName.substring(0,3) + Math.floor(Math.random() * Math.floor(1000));\n                const ration = await this.getRation();\n                const accounts = await web3.eth.getAccounts();\n                const s = Shop(this.props.address);\n                await s.methods\n                .purchase(ration, threeDigit, date, this.state.kerosene, this.state.rice, this.state.wheat, this.state.arhad)\n                .send({\n                    from : accounts[0],\n                    value: web3.utils.toWei('72', 'wei')\n                });\n                this.saveToMongo();\n            }\n            \n        } catch(e) {\n            this.setState({tableError : e.message});\n        }\n    }\n\n    renderButton(){\n        return (\n            <Button color='blue' onClick={this.onClick}>\n            Make Payment\n            </Button>\n    \n        );\n    }\n\n    onComplaintButtonClick = (event) => {\n        this.setState({cards : <div>This is a ard</div>}); \n    }\n\n    renderComplaintButton = () => {\n        return (\n            <Button color='blue' onClick={this.onComplaintButtonClick}>\n            Make Complaint\n            </Button>\n        );\n    }\n\n    render() {\n        return (\n            <Layout headerToken={this.props.headerToken} loggedIn={this.props.loggedIn}>\n                <Grid style={{color:'#2185D0'}} columns={1}>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderTable()}\n                        </Grid.Column>  \n                    </Grid.Row>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderButton()}\n                        </Grid.Column>  \n                    </Grid.Row>\n                    {this.state.cards}\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderRecordButton()}\n                        </Grid.Column>\n                        <Grid.Column>\n                            {this.renderComplaintButton()}\n                        </Grid.Column>   \n                    </Grid.Row>\n                    \n                </Grid>\n            </Layout>\n        );\n    }\n}\n\n\nexport default ShopShow;"]},"metadata":{},"sourceType":"module"}