{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport Shop from '../../ethereum/shop';\nimport { Card, Table, Grid, Button, Input } from 'semantic-ui-react';\nimport { Link, Router } from '../../routes';\nimport validate from '../../localmodules/token_validate';\nimport get from '../../localmodules/express_get';\nimport web3 from '../../ethereum/web3';\n\nvar ShopShow = /*#__PURE__*/function (_Component) {\n  _inherits(ShopShow, _Component);\n\n  function ShopShow() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ShopShow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ShopShow)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      rice: '',\n      wheat: '',\n      arhar: '',\n      kerosene: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAadhar\", function _callee() {\n      var headers, _ref, data, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              headers = {\n                'Content-Type': 'application/json',\n                'x-auth-token': _this.props.headerToken\n              };\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(get('/user/login/me', headers));\n\n            case 3:\n              _ref = _context.sent;\n              data = _ref.data;\n              status = _ref.status;\n              return _context.abrupt(\"return\", data.aadhar);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function _callee2() {\n      var dateIns, date, threeDigit, aadhar, accounts, s;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dateIns = new Date();\n              date = dateIns.toLocaleDateString() + '(' + dateIns.getHours() + ':' + dateIns.getMinutes() + ')';\n              threeDigit = 'OD4200' + Math.floor(Math.random() * Math.floor(1000));\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(_this.getAadhar());\n\n            case 5:\n              aadhar = _context2.sent;\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(web3.eth.getAccounts());\n\n            case 8:\n              accounts = _context2.sent;\n              s = Shop(_this.props.address);\n              _context2.next = 12;\n              return _regeneratorRuntime.awrap(s.methods.purchase(aadhar, threeDigit, date).send({\n                from: accounts[0]\n              }));\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ShopShow, [{\n    key: \"renderTable\",\n    value: function renderTable() {\n      var tableRows = this.props.items.map(function (item, index) {\n        var maxQty = \"5 Kg\";\n        if (item.name === 'Kerosene') maxQty = \"5 Litres\";\n        return __jsx(Table.Row, {\n          key: index\n        }, __jsx(Table.Cell, null, item.name), __jsx(Table.Cell, null, item.quantity), __jsx(Table.Cell, null, item.price), __jsx(Table.Cell, null, maxQty), __jsx(Table.Cell, null, __jsx(Input, {\n          type: \"number\",\n          placeholder: \"Quantity\" // value={buyQty}\n          // onChange={event => this.setState({  : event.target.value })}\n\n        })));\n      });\n      return __jsx(\"div\", null, __jsx(\"h3\", null, __jsx(\"strong\", null, \"STOCK STATEMENT\")), __jsx(Table, null, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Item Name\"), __jsx(Table.HeaderCell, null, \"Stock\"), __jsx(Table.HeaderCell, null, \"Price(per KG)\"), __jsx(Table.HeaderCell, null, \"Maximum Quantity Per Month\"), __jsx(Table.HeaderCell, null))), __jsx(Table.Body, null, tableRows)));\n    }\n  }, {\n    key: \"renderCard\",\n    value: function renderCard() {\n      var items = [{\n        header: this.props.shopName,\n        description: 'SHOP NAME',\n        meta: 'This is the name of the shop.'\n      }, {\n        header: this.props.fpdName,\n        description: 'FDP NUMBER',\n        meta: 'This is the name of the shop.'\n      }, {\n        header: this.props.managerName,\n        description: 'MANAGER NAME',\n        meta: 'This is the name of the shop.'\n      }];\n      return __jsx(\"div\", null, __jsx(Card.Group, {\n        items: items,\n        itemsPerRow: 3\n      }), __jsx(Card.Group, {\n        itemsPerRow: 2\n      }, __jsx(Card, null, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.addr), __jsx(Card.Meta, null, \"This is the name of the shop.\"), __jsx(Card.Description, null, \"SHOP ADDRESS\"))), __jsx(Card, null, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.blockName), __jsx(Card.Meta, null, \"This is the name of the block.\"), __jsx(Card.Description, null, \"BLOCK NAME\")))));\n    }\n  }, {\n    key: \"renderRecordButton\",\n    value: function renderRecordButton() {\n      return __jsx(Link, {\n        route: \"/\".concat(this.props.headerToken, \"/shops/record/\").concat(this.props.currentAddress)\n      }, __jsx(\"a\", null, __jsx(Button, {\n        color: \"blue\"\n      }, \"View Previous Record Details\")));\n    }\n  }, {\n    key: \"renderButton\",\n    value: function renderButton() {\n      return __jsx(Button, {\n        color: \"blue\",\n        onClick: this.onClick\n      }, \"Make Payment\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        headerToken: this.props.headerToken,\n        loggedIn: this.props.loggedIn\n      }, __jsx(Grid, {\n        style: {\n          color: '#2185D0'\n        },\n        columns: 1\n      }, __jsx(Grid.Row, {\n        textAlign: \"center\"\n      }, __jsx(Grid.Column, null, this.renderTable())), __jsx(Grid.Row, {\n        textAlign: \"center\"\n      }, __jsx(Grid.Column, null, this.renderButton())), __jsx(Grid.Row, null, __jsx(Grid.Column, null, this.renderCard())), __jsx(Grid.Row, {\n        textAlign: \"center\"\n      }, __jsx(Grid.Column, null, this.renderRecordButton()))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var _validate, headerToken, loggedIn, headers, _ref2, data, status, address, s, details, blockName;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _validate = validate(props.query.headerToken), headerToken = _validate.headerToken, loggedIn = _validate.loggedIn;\n              headers = {\n                'Content-Type': 'application/json',\n                'x-auth-token': headerToken\n              };\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(get('/user/login/me/blockName', headers));\n\n            case 4:\n              _ref2 = _context3.sent;\n              data = _ref2.data;\n              status = _ref2.status;\n              address = props.query.address;\n              s = Shop(address);\n              _context3.next = 11;\n              return _regeneratorRuntime.awrap(s.methods.getDetails().call());\n\n            case 11:\n              details = _context3.sent;\n              _context3.next = 14;\n              return _regeneratorRuntime.awrap(s.methods.blockName().call());\n\n            case 14:\n              blockName = _context3.sent;\n              return _context3.abrupt(\"return\", {\n                managerName: details[0],\n                items: [{\n                  quantity: details[1],\n                  name: 'Rice',\n                  price: '2'\n                }, {\n                  quantity: details[2],\n                  name: 'Wheat',\n                  price: '4'\n                }, {\n                  quantity: details[3],\n                  name: 'Arhad',\n                  price: '3'\n                }, {\n                  quantity: details[4],\n                  name: 'Kerosene',\n                  price: '5'\n                }],\n                fpdName: details[5],\n                shopName: details[6],\n                manager: details[7],\n                addr: details[8],\n                currentAddress: address,\n                headerToken: headerToken,\n                loggedIn: loggedIn,\n                blockName: data.area,\n                address: address\n              });\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return ShopShow;\n}(Component);\n\nexport default ShopShow;","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/pages/shops/show.js"],"names":["React","Component","Layout","Shop","Card","Table","Grid","Button","Input","Link","Router","validate","get","web3","ShopShow","rice","wheat","arhar","kerosene","headers","props","headerToken","data","status","aadhar","dateIns","Date","date","toLocaleDateString","getHours","getMinutes","threeDigit","Math","floor","random","getAadhar","eth","getAccounts","accounts","s","address","methods","purchase","send","from","tableRows","items","map","item","index","maxQty","name","quantity","price","header","shopName","description","meta","fpdName","managerName","addr","blockName","currentAddress","onClick","loggedIn","color","renderTable","renderButton","renderCard","renderRecordButton","query","getDetails","call","details","manager","area"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport Shop from '../../ethereum/shop';\nimport { Card, Table, Grid, Button, Input } from 'semantic-ui-react';\nimport {  Link, Router } from '../../routes';\nimport validate from '../../localmodules/token_validate';\nimport get from '../../localmodules/express_get';\nimport web3 from '../../ethereum/web3';\n\n\nclass ShopShow extends Component {\n\n    state = { \n        rice : '',\n        wheat : '',\n        arhar : '',\n        kerosene : ''\n    };\n\n    static async getInitialProps(props) {\n        const { headerToken, loggedIn } = validate(props.query.headerToken);\n        const headers = { 'Content-Type':'application/json', 'x-auth-token' : headerToken};\n        const {data, status} = await get('/user/login/me/blockName', headers);\n        const address = props.query.address;\n\n        const s = Shop(address);\n        const details = await s.methods.getDetails().call();\n        const blockName = await s.methods.blockName().call();\n        return { \n            managerName : details[0],\n            items : [{quantity : details[1], name : 'Rice', price : '2'},\n                    {quantity: details[2], name : 'Wheat', price : '4'},\n                    {quantity : details[3], name : 'Arhad', price : '3'},\n                    {quantity : details[4], name : 'Kerosene', price : '5'}],\n            fpdName : details[5],\n            shopName : details[6],\n            manager : details[7],\n            addr : details[8],\n            currentAddress : address,\n            headerToken,\n            loggedIn,\n            blockName : data.area,\n            address\n        };\n    }\n\n    renderTable() {\n        const tableRows = this.props.items.map((item, index) => {\n            let maxQty = \"5 Kg\"\n            if(item.name === 'Kerosene')\n                maxQty = \"5 Litres\"\n            return (\n                <Table.Row key={index}>\n                    <Table.Cell>{item.name}</Table.Cell>\n                    <Table.Cell>{item.quantity}</Table.Cell>\n                    <Table.Cell>{item.price}</Table.Cell>\n                    <Table.Cell>{maxQty}</Table.Cell>\n                    <Table.Cell>\n                        <Input\n                            type='number'\n                            placeholder = 'Quantity'\n                            // value={buyQty}\n                            // onChange={event => this.setState({  : event.target.value })}\n                            />\n                    </Table.Cell>\n                </Table.Row>\n            );\n        });\n        return (\n            <div>\n                <h3><strong>STOCK STATEMENT</strong></h3>\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Item Name</Table.HeaderCell>\n                            <Table.HeaderCell>Stock</Table.HeaderCell>\n                            <Table.HeaderCell>Price(per KG)</Table.HeaderCell>\n                            <Table.HeaderCell>Maximum Quantity Per Month</Table.HeaderCell>\n                            <Table.HeaderCell>\n                            </Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {tableRows}\n                    </Table.Body>\n                </Table>\n            </div>\n        );\n    }\n\n    renderCard() {\n        const items = [\n            {\n                header : this.props.shopName,\n                description : 'SHOP NAME',\n                meta : 'This is the name of the shop.'\n            },\n            {\n                header : this.props.fpdName,\n                description : 'FDP NUMBER',\n                meta : 'This is the name of the shop.'\n            },\n            {\n                header : this.props.managerName,\n                description : 'MANAGER NAME',\n                meta : 'This is the name of the shop.'\n            },\n        ];\n\n        return (\n            <div>\n                <Card.Group items = {items} itemsPerRow = {3}/>\n                    \n                <Card.Group itemsPerRow={2}>\n                    <Card>\n                        <Card.Content>\n                            <Card.Header>{this.props.addr}</Card.Header>\n                            <Card.Meta>This is the name of the shop.</Card.Meta>\n                            <Card.Description>SHOP ADDRESS</Card.Description>\n                        </Card.Content>\n                    </Card>\n                    <Card>\n                        <Card.Content>\n                            <Card.Header>{this.props.blockName}</Card.Header>\n                            <Card.Meta>This is the name of the block.</Card.Meta>\n                            <Card.Description>BLOCK NAME</Card.Description>\n                        </Card.Content>\n                    </Card>\n                </Card.Group>\n            </div>\n        );\n    }\n\n    renderRecordButton() {\n        return (\n\n            <Link route={`/${this.props.headerToken}/shops/record/${this.props.currentAddress}`}>\n                <a>\n                    <Button color='blue'>\n                    View Previous Record Details\n                    </Button>\n                </a>\n            </Link>\n\n        );\n    }\n\n    getAadhar = async () => {\n        const headers = { 'Content-Type':'application/json', 'x-auth-token' : this.props.headerToken};\n        const {data, status} = await get('/user/login/me', headers);\n        return data.aadhar;\n    }\n\n\n    onClick = async () => {\n        const dateIns = new Date;\n        const date = dateIns.toLocaleDateString() + '(' +dateIns.getHours() +':'+ dateIns.getMinutes() + ')';\n        const threeDigit = 'OD4200' + Math.floor(Math.random() * Math.floor(1000));\n        const aadhar = await this.getAadhar();\n        const accounts = await web3.eth.getAccounts();\n        const s = Shop(this.props.address);\n        await s.methods\n         .purchase(aadhar, threeDigit, date)\n         .send({\n             from : accounts[0]\n         });\n    }\n\n    renderButton(){\n        return (\n            <Button color='blue' onClick={this.onClick}>\n            Make Payment\n            </Button>\n    \n        );\n    }\n\n\n    render() {\n        return (\n            <Layout headerToken={this.props.headerToken} loggedIn={this.props.loggedIn}>\n                <Grid style={{color:'#2185D0'}} columns={1}>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderTable()}\n                        </Grid.Column>  \n                    </Grid.Row>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderButton()}\n                        </Grid.Column>  \n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            {this.renderCard()}\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderRecordButton()}\n                        </Grid.Column>  \n                    </Grid.Row>\n                    \n                </Grid>\n            </Layout>\n        );\n    }\n}\n\n\nexport default ShopShow;"]},"metadata":{},"sourceType":"module"}