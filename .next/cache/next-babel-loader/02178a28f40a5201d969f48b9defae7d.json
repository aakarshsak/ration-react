{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport Shop from '../../ethereum/shop';\nimport { Card, Table, Grid, Button, Input, Message, Form } from 'semantic-ui-react';\nimport { Link, Router } from '../../routes';\nimport validate from '../../localmodules/token_validate';\nimport get from '../../localmodules/express_get';\nimport web3 from '../../ethereum/web3';\nimport CustomError from '../../localmodules/custom_error';\nimport post from '../../localmodules/express_post';\nimport CompalintComponent from '../../components/complaint';\n\nvar ShopShow = /*#__PURE__*/function (_Component) {\n  _inherits(ShopShow, _Component);\n\n  function ShopShow() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ShopShow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ShopShow)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      rice: '',\n      wheat: '',\n      arhad: '',\n      kerosene: '',\n      tableError: '',\n      status: '',\n      threeDigit: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getInitValue\", function _callee() {\n      var dataInp, headers, _ref, data, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(fpdName);\n              dataInp = {\n                fpdName: fpdName\n              };\n              headers = {\n                'Content-Type': 'application/json'\n              };\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(postWithData('/complaints/list', headers, dataInp));\n\n            case 5:\n              _ref = _context.sent;\n              data = _ref.data;\n              status = _ref.status;\n              return _context.abrupt(\"return\", {\n                data: ['a', 'b', 'c'],\n                status: status\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getRation\", function _callee2() {\n      var headers, _ref2, data, status;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              headers = {\n                'Content-Type': 'application/json',\n                'x-auth-token': _this.props.headerToken\n              };\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(get('/user/login/me', headers));\n\n            case 3:\n              _ref2 = _context2.sent;\n              data = _ref2.data;\n              status = _ref2.status;\n              return _context2.abrupt(\"return\", data.ration);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"verifyCurrent\", function () {\n      var qty = _this.state;\n      var msg = '';\n      var count = 0;\n\n      if (qty.rice > 5) {\n        msg = msg + \"Rice\";\n        count++;\n      }\n\n      if (qty.wheat > 5) {\n        msg = msg + \", Wheat\";\n        if (count === 0) msg = 'Wheat';\n        count++;\n      }\n\n      if (qty.arhad > 5) {\n        msg = msg + \", Arhad\";\n        if (count === 0) msg = 'Arhad';\n        count++;\n      }\n\n      if (qty.kerosene > 5) {\n        msg = msg + \", Kerosene\";\n        if (count === 0) msg = 'Kerosene';\n        count++;\n      }\n\n      if (count > 0) {\n        throw new CustomError(\"Quantity of \".concat(msg, \" exceeds the maximum quantity allowed per month.\"));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"verifyPrevious\", function _callee3() {\n      var dateIns, date, threeDigit, ration, data, headers, _ref3, text, status;\n\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dateIns = new Date();\n              date = dateIns.toLocaleDateString() + '(' + dateIns.getHours() + ':' + dateIns.getMinutes() + ')';\n              threeDigit = 'OD20M05' + _this.props.blockName.substring(0, 3) + Math.floor(Math.random() * Math.floor(1000));\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(_this.getRation());\n\n            case 5:\n              ration = _context3.sent;\n              data = {\n                rice: _this.state.rice,\n                wheat: _this.state.wheat,\n                arhad: _this.state.arhad,\n                kerosene: _this.state.kerosene,\n                ration: ration,\n                date: date,\n                orderid: threeDigit,\n                fpdName: _this.props.fpdName\n              };\n              headers = {\n                'Content-Type': 'application/json'\n              };\n              _context3.next = 10;\n              return _regeneratorRuntime.awrap(post('/record/verify', headers, data));\n\n            case 10:\n              _ref3 = _context3.sent;\n              text = _ref3.text;\n              status = _ref3.status;\n              console.log(status, \"Func\");\n\n              if (!(status === 400)) {\n                _context3.next = 17;\n                break;\n              }\n\n              _this.setState({\n                status: status\n              });\n\n              throw new CustomError(text);\n\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveToMongo\", function _callee4() {\n      var dateIns, date, threeDigit, ration, data, headers, _ref4, text, status;\n\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              dateIns = new Date();\n              date = dateIns.toLocaleDateString() + '(' + dateIns.getHours() + ':' + dateIns.getMinutes() + ')';\n              threeDigit = 'OD20M05' + _this.props.blockName.substring(0, 3) + Math.floor(Math.random() * Math.floor(1000));\n\n              _this.setState({\n                threeDigit: threeDigit\n              });\n\n              _context4.next = 6;\n              return _regeneratorRuntime.awrap(_this.getRation());\n\n            case 6:\n              ration = _context4.sent;\n              data = {\n                rice: _this.state.rice,\n                wheat: _this.state.wheat,\n                arhad: _this.state.arhad,\n                kerosene: _this.state.kerosene,\n                ration: ration,\n                date: date,\n                orderid: threeDigit,\n                fpdName: _this.props.fpdName\n              };\n              headers = {\n                'Content-Type': 'application/json'\n              };\n              _context4.next = 11;\n              return _regeneratorRuntime.awrap(post('/record', headers, data));\n\n            case 11:\n              _ref4 = _context4.sent;\n              text = _ref4.text;\n              status = _ref4.status;\n\n              if (status !== 400) {\n                _this.setState({\n                  tableError: 'Success'\n                });\n              }\n\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function _callee5() {\n      var dateIns, date, threeDigit, ration, accounts, s;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n\n              _this.setState({\n                tableError: ''\n              });\n\n              _this.verifyCurrent();\n\n              _context5.next = 5;\n              return _regeneratorRuntime.awrap(_this.verifyPrevious());\n\n            case 5:\n              console.log(_this.state.status);\n\n              if (_this.state.status === 400) {\n                _context5.next = 20;\n                break;\n              }\n\n              dateIns = new Date();\n              date = dateIns.toLocaleDateString() + '(' + dateIns.getHours() + ':' + dateIns.getMinutes() + ')';\n              threeDigit = 'OD20M05' + _this.props.blockName.substring(0, 3) + Math.floor(Math.random() * Math.floor(1000));\n              _context5.next = 12;\n              return _regeneratorRuntime.awrap(_this.getRation());\n\n            case 12:\n              ration = _context5.sent;\n              _context5.next = 15;\n              return _regeneratorRuntime.awrap(web3.eth.getAccounts());\n\n            case 15:\n              accounts = _context5.sent;\n              s = Shop(_this.props.address);\n              _context5.next = 19;\n              return _regeneratorRuntime.awrap(s.methods.purchase(ration, threeDigit, date, _this.state.kerosene, _this.state.rice, _this.state.wheat, _this.state.arhad).send({\n                from: accounts[0],\n                value: web3.utils.toWei('72', 'wei')\n              }));\n\n            case 19:\n              _this.saveToMongo();\n\n            case 20:\n              _context5.next = 25;\n              break;\n\n            case 22:\n              _context5.prev = 22;\n              _context5.t0 = _context5[\"catch\"](0);\n\n              _this.setState({\n                tableError: _context5.t0.message\n              });\n\n            case 25:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, [[0, 22]]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderComment\", function _callee6() {\n      var comments;\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              comments = _this.props.dataComplaint.map(function (item, index) {\n                return __jsx(Comment, null, __jsx(Comment.Content, null, __jsx(Comment.Author, {\n                  as: \"a\"\n                }, \"Matt\"), __jsx(Comment.Metadata, null, __jsx(\"div\", null, \"Today at 5:42PM\")), __jsx(Comment.Text, null, \"How artistic!\"), __jsx(Comment.Actions, null, __jsx(Comment.Action, null, \"Reply\"))));\n              });\n              return _context6.abrupt(\"return\", comments);\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ShopShow, [{\n    key: \"renderTable\",\n    value: function renderTable() {\n      var _this2 = this;\n\n      var items = this.props.items;\n\n      var tableRows = __jsx(Table.Body, null, __jsx(Table.Row, null, __jsx(Table.Cell, null, items[0].name), __jsx(Table.Cell, null, items[0].quantity), __jsx(Table.Cell, null, items[0].price), __jsx(Table.Cell, null, \"5 Kg\"), __jsx(Table.Cell, null, __jsx(Input, {\n        type: \"number\",\n        placeholder: \"Quantity\",\n        value: this.state.rice,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            rice: event.target.value\n          });\n        }\n      }))), __jsx(Table.Row, null, __jsx(Table.Cell, null, items[1].name), __jsx(Table.Cell, null, items[1].quantity), __jsx(Table.Cell, null, items[1].price), __jsx(Table.Cell, null, \"5 Kg\"), __jsx(Table.Cell, null, __jsx(Input, {\n        type: \"number\",\n        placeholder: \"Quantity\",\n        value: this.state.wheat,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            wheat: event.target.value\n          });\n        }\n      }))), __jsx(Table.Row, null, __jsx(Table.Cell, null, items[2].name), __jsx(Table.Cell, null, items[2].quantity), __jsx(Table.Cell, null, items[2].price), __jsx(Table.Cell, null, \"5 Kg\"), __jsx(Table.Cell, null, __jsx(Input, {\n        type: \"number\",\n        placeholder: \"Quantity\",\n        value: this.state.arhad,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            arhad: event.target.value\n          });\n        }\n      }))), __jsx(Table.Row, null, __jsx(Table.Cell, null, items[3].name), __jsx(Table.Cell, null, items[3].quantity), __jsx(Table.Cell, null, items[3].price), __jsx(Table.Cell, null, \"5 ltr\"), __jsx(Table.Cell, null, __jsx(Input, {\n        type: \"number\",\n        placeholder: \"Quantity\",\n        value: this.state.kerosene,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            kerosene: event.target.value\n          });\n        }\n      }))));\n\n      return __jsx(\"div\", null, __jsx(\"h3\", null, __jsx(\"strong\", null, \"STOCK STATEMENT\")), __jsx(Table, null, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Item Name\"), __jsx(Table.HeaderCell, null, \"Stock\"), __jsx(Table.HeaderCell, null, \"Price(per KG)\"), __jsx(Table.HeaderCell, null, \"Maximum Quantity Per Month\"), __jsx(Table.HeaderCell, null, \"Buying Quantity\"))), tableRows), this.renderTableError());\n    }\n  }, {\n    key: \"renderCard\",\n    value: function renderCard() {\n      var items = [{\n        header: this.props.shopName,\n        description: 'SHOP NAME',\n        meta: 'This is the name of the shop.'\n      }, {\n        header: this.props.fpdName,\n        description: 'FDP NUMBER',\n        meta: 'This is the name of the shop.'\n      }, {\n        header: this.props.managerName,\n        description: 'MANAGER NAME',\n        meta: 'This is the name of the shop.'\n      }];\n      return __jsx(\"div\", null, __jsx(Card.Group, {\n        items: items,\n        itemsPerRow: 3\n      }), __jsx(Card.Group, {\n        itemsPerRow: 2\n      }, __jsx(Card, null, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.addr), __jsx(Card.Meta, null, \"This is the name of the shop.\"), __jsx(Card.Description, null, \"SHOP ADDRESS\"))), __jsx(Card, null, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.blockName), __jsx(Card.Meta, null, \"This is the name of the block.\"), __jsx(Card.Description, null, \"BLOCK NAME\")))));\n    }\n  }, {\n    key: \"renderRecordButton\",\n    value: function renderRecordButton() {\n      return __jsx(Link, {\n        route: \"/\".concat(this.props.headerToken, \"/shops/record/\").concat(this.props.currentAddress)\n      }, __jsx(\"a\", null, __jsx(Button, {\n        color: \"blue\"\n      }, \"View Previous Record Details\")));\n    }\n  }, {\n    key: \"renderTableError\",\n    value: function renderTableError() {\n      if (this.state.tableError === '') return null;else if (this.state.tableError === 'Success') return __jsx(Message, {\n        color: \"green\"\n      }, \"Payment Successful.   Total Amount Paid is Rs.\".concat(_parseInt(this.state.rice) * 2 + _parseInt(this.state.wheat) * 4 + _parseInt(this.state.arhad) * 3 + _parseInt(this.state.kerosene) * 5, \".   Order ID : \").concat(this.state.threeDigit));\n      return __jsx(Message, {\n        color: \"red\"\n      }, this.state.tableError);\n    }\n  }, {\n    key: \"renderButton\",\n    value: function renderButton() {\n      return __jsx(Button, {\n        color: \"blue\",\n        onClick: this.onClick\n      }, \"Make Payment\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        headerToken: this.props.headerToken,\n        loggedIn: this.props.loggedIn\n      }, __jsx(Grid, {\n        style: {\n          color: '#2185D0'\n        },\n        columns: 1\n      }, __jsx(Grid.Row, {\n        textAlign: \"center\"\n      }, __jsx(Grid.Column, null, this.renderTable())), __jsx(Grid.Row, {\n        textAlign: \"center\"\n      }, __jsx(Grid.Column, null, this.renderButton())), __jsx(Grid.Row, null, __jsx(Grid.Column, null, this.renderCard())), __jsx(Grid.Row, {\n        textAlign: \"center\"\n      }, __jsx(Grid.Column, null, this.renderRecordButton()))), __jsx(CompalintComponentn, {\n        renderValue: this.renderComment()\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var _validate, headerToken, loggedIn, headers, _ref5, data, status, address, s, details, dataComplaint;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _validate = validate(props.query.headerToken), headerToken = _validate.headerToken, loggedIn = _validate.loggedIn;\n              headers = {\n                'Content-Type': 'application/json',\n                'x-auth-token': headerToken\n              };\n              _context7.next = 4;\n              return _regeneratorRuntime.awrap(get('/user/login/me/blockName', headers));\n\n            case 4:\n              _ref5 = _context7.sent;\n              data = _ref5.data;\n              status = _ref5.status;\n              address = props.query.address;\n              s = Shop(address);\n              _context7.next = 11;\n              return _regeneratorRuntime.awrap(s.methods.getDetails().call());\n\n            case 11:\n              details = _context7.sent;\n              _context7.next = 14;\n              return _regeneratorRuntime.awrap(this.getInitValue(details[5]).data);\n\n            case 14:\n              dataComplaint = _context7.sent;\n              console.log(dataComplaint);\n              return _context7.abrupt(\"return\", {\n                managerName: details[0],\n                items: [{\n                  quantity: details[1],\n                  name: 'Rice',\n                  price: '2'\n                }, {\n                  quantity: details[2],\n                  name: 'Wheat',\n                  price: '4'\n                }, {\n                  quantity: details[3],\n                  name: 'Arhad',\n                  price: '3'\n                }, {\n                  quantity: details[4],\n                  name: 'Kerosene',\n                  price: '5'\n                }],\n                fpdName: details[5],\n                shopName: details[6],\n                manager: details[7],\n                addr: details[8],\n                currentAddress: address,\n                headerToken: headerToken,\n                loggedIn: loggedIn,\n                blockName: data.area,\n                address: address,\n                dataComplaint: dataComplaint\n              });\n\n            case 17:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return ShopShow;\n}(Component);\n\nexport default ShopShow;","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/pages/shops/show.js"],"names":["React","Component","Layout","Shop","Card","Table","Grid","Button","Input","Message","Form","Link","Router","validate","get","web3","CustomError","post","CompalintComponent","ShopShow","rice","wheat","arhad","kerosene","tableError","status","threeDigit","console","log","fpdName","dataInp","headers","postWithData","data","props","headerToken","ration","qty","state","msg","count","dateIns","Date","date","toLocaleDateString","getHours","getMinutes","blockName","substring","Math","floor","random","getRation","orderid","text","setState","verifyCurrent","verifyPrevious","eth","getAccounts","accounts","s","address","methods","purchase","send","from","value","utils","toWei","saveToMongo","message","comments","dataComplaint","map","item","index","items","tableRows","name","quantity","price","event","target","renderTableError","header","shopName","description","meta","managerName","addr","currentAddress","onClick","loggedIn","color","renderTable","renderButton","renderCard","renderRecordButton","renderComment","query","getDetails","call","details","getInitValue","manager","area"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport Shop from '../../ethereum/shop';\nimport { Card, Table, Grid, Button, Input, Message, Form } from 'semantic-ui-react';\nimport {  Link, Router } from '../../routes';\nimport validate from '../../localmodules/token_validate';\nimport get from '../../localmodules/express_get';\nimport web3 from '../../ethereum/web3';\nimport CustomError from '../../localmodules/custom_error';\nimport post from '../../localmodules/express_post';\nimport CompalintComponent from '../../components/complaint';\n\n\nclass ShopShow extends Component {\n\n    state = { \n        rice : '',\n        wheat : '',\n        arhad : '',\n        kerosene : '',\n        tableError : '',\n        status : '',\n        threeDigit: ''\n    };\n\n    getInitValue = async () => {\n        console.log( fpdName );\n        const dataInp = {\n            fpdName \n        }\n        const headers = { 'Content-Type':'application/json'};\n        const {data, status} = await postWithData('/complaints/list', headers, dataInp)\n        //console.log(data.record, 'insidemethods')\n        return { data: ['a', 'b', 'c'], status };\n    }\n\n    static async getInitialProps(props) {\n        const { headerToken, loggedIn } = validate(props.query.headerToken);\n        const headers = { 'Content-Type':'application/json', 'x-auth-token' : headerToken};\n        const {data, status} = await get('/user/login/me/blockName', headers);\n        const address = props.query.address;\n\n        const s = Shop(address);\n        const details = await s.methods.getDetails().call();\n\n\n        const dataComplaint = await this.getInitValue(details[5]).data;\n        console.log(dataComplaint);\n        return { \n            managerName : details[0],\n            items : [{quantity : details[1], name : 'Rice', price : '2'},\n                    {quantity: details[2], name : 'Wheat', price : '4'},\n                    {quantity : details[3], name : 'Arhad', price : '3'},\n                    {quantity : details[4], name : 'Kerosene', price : '5'}],\n            fpdName : details[5],\n            shopName : details[6],\n            manager : details[7],\n            addr : details[8],\n            currentAddress : address,\n            headerToken,\n            loggedIn,\n            blockName : data.area,\n            address,\n            dataComplaint\n        };\n    }\n\n    \n\n    renderTable() {\n        const items = this.props.items;\n        const tableRows = (\n            <Table.Body>\n                <Table.Row>\n                    <Table.Cell>{items[0].name}</Table.Cell>\n                    <Table.Cell>{items[0].quantity}</Table.Cell>\n                    <Table.Cell>{items[0].price}</Table.Cell>\n                    <Table.Cell>5 Kg</Table.Cell>\n                    <Table.Cell>\n                        <Input\n                            type='number'\n                            placeholder = 'Quantity'\n                            value={this.state.rice}\n                            onChange={event => this.setState({ rice : event.target.value })}\n                        />\n                    </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                <Table.Cell>{items[1].name}</Table.Cell>\n                    <Table.Cell>{items[1].quantity}</Table.Cell>\n                    <Table.Cell>{items[1].price}</Table.Cell>\n                    <Table.Cell>5 Kg</Table.Cell>\n                    <Table.Cell>\n                        <Input\n                            type='number'\n                            placeholder = 'Quantity'\n                            value={this.state.wheat}\n                            onChange={event => this.setState({ wheat : event.target.value })}\n                        />\n                    </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                <Table.Cell>{items[2].name}</Table.Cell>\n                    <Table.Cell>{items[2].quantity}</Table.Cell>\n                    <Table.Cell>{items[2].price}</Table.Cell>\n                    <Table.Cell>5 Kg</Table.Cell>\n                    <Table.Cell>\n                        <Input\n                            type='number'\n                            placeholder = 'Quantity'\n                            value={this.state.arhad}\n                            onChange={event => this.setState({ arhad : event.target.value })}\n                        />\n                    </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                <Table.Cell>{items[3].name}</Table.Cell>\n                    <Table.Cell>{items[3].quantity}</Table.Cell>\n                    <Table.Cell>{items[3].price}</Table.Cell>\n                    <Table.Cell>5 ltr</Table.Cell>\n                    <Table.Cell>\n                        <Input\n                            type='number'\n                            placeholder = 'Quantity'\n                            value={this.state.kerosene}\n                            onChange={event => this.setState({ kerosene : event.target.value })}\n                        />\n                    </Table.Cell>\n                </Table.Row>\n            </Table.Body>\n        );\n        \n        return (\n            <div>\n                <h3><strong>STOCK STATEMENT</strong></h3>\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Item Name</Table.HeaderCell>\n                            <Table.HeaderCell>Stock</Table.HeaderCell>\n                            <Table.HeaderCell>Price(per KG)</Table.HeaderCell>\n                            <Table.HeaderCell>Maximum Quantity Per Month</Table.HeaderCell>\n                            <Table.HeaderCell>Buying Quantity</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    {tableRows}\n                \n                </Table>\n                {this.renderTableError()}\n            </div>\n        );\n    }\n\n    renderCard() {\n        const items = [\n            {\n                header : this.props.shopName,\n                description : 'SHOP NAME',\n                meta : 'This is the name of the shop.'\n            },\n            {\n                header : this.props.fpdName,\n                description : 'FDP NUMBER',\n                meta : 'This is the name of the shop.'\n            },\n            {\n                header : this.props.managerName,\n                description : 'MANAGER NAME',\n                meta : 'This is the name of the shop.'\n            },\n        ];\n\n        return (\n            <div>\n                <Card.Group items = {items} itemsPerRow = {3}/>\n                    \n                <Card.Group itemsPerRow={2}>\n                    <Card>\n                        <Card.Content>\n                            <Card.Header>{this.props.addr}</Card.Header>\n                            <Card.Meta>This is the name of the shop.</Card.Meta>\n                            <Card.Description>SHOP ADDRESS</Card.Description>\n                        </Card.Content>\n                    </Card>\n                    <Card>\n                        <Card.Content>\n                            <Card.Header>{this.props.blockName}</Card.Header>\n                            <Card.Meta>This is the name of the block.</Card.Meta>\n                            <Card.Description>BLOCK NAME</Card.Description>\n                        </Card.Content>\n                    </Card>\n                </Card.Group>\n            </div>\n        );\n    }\n\n    renderRecordButton() {\n        return (\n\n            <Link route={`/${this.props.headerToken}/shops/record/${this.props.currentAddress}`}>\n                <a>\n                    <Button color='blue'>\n                    View Previous Record Details\n                    </Button>\n                </a>\n            </Link>\n\n        );\n    }\n\n    getRation = async () => {\n        const headers = { 'Content-Type':'application/json', 'x-auth-token' : this.props.headerToken};\n        const {data, status} = await get('/user/login/me', headers);\n        return data.ration;\n    }\n\n    verifyCurrent = () => {\n        const qty = this.state;\n        let msg = '';\n        let count = 0;\n        if(qty.rice > 5){\n            msg = msg+\"Rice\";\n            count++;\n        }\n        if(qty.wheat > 5){\n            msg = msg+\", Wheat\";\n            if(count ===0)\n                msg = 'Wheat'\n            count++;\n        }\n        if(qty.arhad > 5){\n            msg = msg+\", Arhad\";\n            if(count === 0)\n                msg = 'Arhad'\n            count++;\n        }\n        if(qty.kerosene > 5){\n            msg = msg+\", Kerosene\";\n            if(count === 0)\n                msg = 'Kerosene'\n            count++;\n        }\n        if( count > 0){\n            throw new CustomError(`Quantity of ${msg} exceeds the maximum quantity allowed per month.`);\n        }\n    }\n    renderTableError(){\n        if(this.state.tableError === '')\n            return null;\n        else if(this.state.tableError === 'Success')\n            return <Message color='green'>{`Payment Successful.   Total Amount Paid is Rs.${parseInt(this.state.rice) * 2 + parseInt(this.state.wheat)*4 + parseInt(this.state.arhad)*3 + parseInt(this.state.kerosene)*5}.   Order ID : ${this.state.threeDigit}`}</Message>;\n        return <Message color='red'>{this.state.tableError}</Message>;\n    }\n\n    verifyPrevious = async () => {\n        const dateIns = new Date;\n        const date = dateIns.toLocaleDateString() + '(' +dateIns.getHours() +':'+ dateIns.getMinutes() + ')';\n        const threeDigit = 'OD20M05' + this.props.blockName.substring(0,3) + Math.floor(Math.random() * Math.floor(1000));\n        const ration = await this.getRation();\n        const data = {\n            rice : this.state.rice,\n            wheat : this.state.wheat,\n            arhad : this.state.arhad,\n            kerosene : this.state.kerosene,\n            ration : ration,\n            date : date,\n            orderid : threeDigit,\n            fpdName : this.props.fpdName\n        };\n\n        const headers = { 'Content-Type':'application/json' };\n        const {text, status} = await post('/record/verify', headers, data);\n        console.log(status, \"Func\");\n        if(status === 400){\n            this.setState({status});\n            throw new CustomError(text);\n        }\n        \n    }\n\n    saveToMongo = async() => {\n        const dateIns = new Date;\n        const date = dateIns.toLocaleDateString() + '(' +dateIns.getHours() +':'+ dateIns.getMinutes() + ')';\n        const threeDigit = 'OD20M05' + this.props.blockName.substring(0,3) + Math.floor(Math.random() * Math.floor(1000));\n        this.setState({threeDigit});\n        const ration = await this.getRation();\n        const data = {\n            rice : this.state.rice,\n            wheat : this.state.wheat,\n            arhad : this.state.arhad,\n            kerosene : this.state.kerosene,\n            ration : ration,\n            date : date,\n            orderid : threeDigit,\n            fpdName : this.props.fpdName\n        };\n        const headers = { 'Content-Type':'application/json' };\n        const {text, status} = await post('/record', headers, data);\n        if(status !== 400){\n            this.setState({ tableError : 'Success' });\n        }\n    }\n\n    onClick = async () => {\n        try {\n            this.setState({tableError : ''});\n            this.verifyCurrent();\n            await this.verifyPrevious();\n            console.log(this.state.status);\n            if(!(this.state.status === 400)){\n                const dateIns = new Date;\n                const date = dateIns.toLocaleDateString() + '(' +dateIns.getHours() +':'+ dateIns.getMinutes() + ')';\n                const threeDigit = 'OD20M05' + this.props.blockName.substring(0,3) + Math.floor(Math.random() * Math.floor(1000));\n                const ration = await this.getRation();\n                const accounts = await web3.eth.getAccounts();\n                const s = Shop(this.props.address);\n                await s.methods\n                .purchase(ration, threeDigit, date, this.state.kerosene, this.state.rice, this.state.wheat, this.state.arhad)\n                .send({\n                    from : accounts[0],\n                    value: web3.utils.toWei('72', 'wei')\n                });\n                this.saveToMongo();\n            }\n            \n        } catch(e) {\n            this.setState({tableError : e.message});\n        }\n    }\n\n    renderButton(){\n        return (\n            <Button color='blue' onClick={this.onClick}>\n            Make Payment\n            </Button>\n    \n        );\n    }\n\n    renderComment = async () =>{\n        const comments = this.props.dataComplaint.map((item, index) => {\n            return (\n                <Comment>\n                    <Comment.Content>\n                    <Comment.Author as='a'>Matt</Comment.Author>\n                    <Comment.Metadata>\n                        <div>Today at 5:42PM</div>\n                    </Comment.Metadata>\n                    <Comment.Text>How artistic!</Comment.Text>\n                    <Comment.Actions>\n                        <Comment.Action>Reply</Comment.Action>\n                    </Comment.Actions>\n                    </Comment.Content>\n                </Comment>\n            );\n        });\n\n        return comments;\n    }\n\n\n    render() {\n        return (\n            <Layout headerToken={this.props.headerToken} loggedIn={this.props.loggedIn}>\n                <Grid style={{color:'#2185D0'}} columns={1}>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderTable()}\n                        </Grid.Column>  \n                    </Grid.Row>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderButton()}\n                        </Grid.Column>  \n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            {this.renderCard()}\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderRecordButton()}\n                        </Grid.Column>\n                        {/* <Grid.Column>\n                            {this.renderComplaintButton()}\n                        </Grid.Column>    */}\n                    </Grid.Row>\n\n                    \n                </Grid>\n                <CompalintComponentn renderValue={this.renderComment()}/>\n            </Layout>\n        );\n    }\n}\n\n\nexport default ShopShow;"]},"metadata":{},"sourceType":"module"}