{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport Shop from '../../ethereum/shop';\nimport { Card, Table, Grid, Button } from 'semantic-ui-react';\nimport { Link, Router } from '../../routes';\nimport validate from '../../localmodules/token_validate';\n\nvar ShopShow = /*#__PURE__*/function (_Component) {\n  _inherits(ShopShow, _Component);\n\n  function ShopShow() {\n    _classCallCheck(this, ShopShow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ShopShow).apply(this, arguments));\n  }\n\n  _createClass(ShopShow, [{\n    key: \"renderTable\",\n    value: function renderTable() {\n      var tableRows = this.props.items.map(function (item, index) {\n        return __jsx(Table.Row, {\n          key: index\n        }, __jsx(Table.Cell, null, item.name), __jsx(Table.Cell, null, item.quantity), __jsx(Table.Cell, null, 10));\n      });\n      return __jsx(\"div\", null, __jsx(\"h3\", null, __jsx(\"strong\", null, \"STOCK STATEMENT\")), __jsx(Table, null, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"Item Name\"), __jsx(Table.HeaderCell, null, \"Stock\"), __jsx(Table.HeaderCell, null, \"Price(per KG)\"))), __jsx(Table.Body, null, tableRows)));\n    }\n  }, {\n    key: \"renderCard\",\n    value: function renderCard() {\n      var items = [{\n        header: this.props.shopName,\n        description: 'SHOP NAME',\n        meta: 'This is the name of the shop.'\n      }, {\n        header: this.props.fpdName,\n        description: 'FDP NUMBER',\n        meta: 'This is the name of the shop.'\n      }, {\n        header: this.props.managerName,\n        description: 'MANAGER NAME',\n        meta: 'This is the name of the shop.'\n      }];\n      return __jsx(\"div\", null, __jsx(Card.Group, {\n        items: items,\n        itemsPerRow: 3\n      }), __jsx(Card.Group, {\n        itemsPerRow: 2\n      }, __jsx(Card, null, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.addr), __jsx(Card.Meta, null, \"This is the name of the shop.\"), __jsx(Card.Description, null, \"SHOP ADDRESS\"))), __jsx(Card, null, __jsx(Card.Content, null, __jsx(Card.Header, null, this.props.blockName), __jsx(Card.Meta, null, \"This is the name of the block.\"), __jsx(Card.Description, null, \"BLOCK NAME\")))));\n    }\n  }, {\n    key: \"renderRecordButton\",\n    value: function renderRecordButton() {\n      return __jsx(Link, {\n        route: \"/\".concat(this.props.headerToken, \"/shops/\").concat(this.props.currentAddress, \"/record\")\n      }, __jsx(\"a\", null, __jsx(Button, {\n        color: \"blue\"\n      }, \"View Previous Record Details\")));\n    }\n  }, {\n    key: \"renderButton\",\n    value: function renderButton() {\n      return __jsx(Link, {\n        route: \"/shops/\".concat(this.props.currentAddress, \"/payment\")\n      }, __jsx(\"a\", null, __jsx(Button, {\n        color: \"blue\"\n      }, \"Make Payment\")));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        headerToken: this.props.headerToken,\n        loggedIn: this.props.loggedIn\n      }, __jsx(Grid, {\n        style: {\n          color: '#2185D0'\n        },\n        columns: 1\n      }, __jsx(Grid.Row, {\n        textAlign: \"center\"\n      }, __jsx(Grid.Column, null, this.renderTable())), __jsx(Grid.Row, {\n        textAlign: \"center\"\n      }, __jsx(Grid.Column, null, this.renderButton())), __jsx(Grid.Row, null, __jsx(Grid.Column, null, this.renderCard())), __jsx(Grid.Row, {\n        textAlign: \"center\"\n      }, __jsx(Grid.Column, null, this.renderRecordButton()))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var _validate, headerToken, loggedIn, address, s, details, blockName;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _validate = validate(props.query.headerToken), headerToken = _validate.headerToken, loggedIn = _validate.loggedIn;\n              address = props.query.address;\n              s = Shop(address);\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(s.methods.getDetails().call());\n\n            case 5:\n              details = _context.sent;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(s.methods.blockName().call());\n\n            case 8:\n              blockName = _context.sent;\n              return _context.abrupt(\"return\", {\n                managerName: details[0],\n                items: [{\n                  quantity: details[1],\n                  name: 'Rice'\n                }, {\n                  quantity: details[2],\n                  name: 'Wheat'\n                }, {\n                  quantity: details[3],\n                  name: 'Arhad'\n                }, {\n                  quantity: details[4],\n                  name: 'Kerosene'\n                }],\n                fpdName: details[5],\n                shopName: details[6],\n                manager: details[7],\n                addr: details[8],\n                currentAddress: address,\n                headerToken: headerToken,\n                loggedIn: loggedIn,\n                blockName: blockName\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return ShopShow;\n}(Component);\n\nexport default ShopShow;","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/pages/shops/show.js"],"names":["React","Component","Layout","Shop","Card","Table","Grid","Button","Link","Router","validate","ShopShow","tableRows","props","items","map","item","index","name","quantity","header","shopName","description","meta","fpdName","managerName","addr","blockName","headerToken","currentAddress","loggedIn","color","renderTable","renderButton","renderCard","renderRecordButton","query","address","s","methods","getDetails","call","details","manager"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport Shop from '../../ethereum/shop';\nimport { Card, Table, Grid, Button } from 'semantic-ui-react';\nimport {  Link, Router } from '../../routes';\nimport validate from '../../localmodules/token_validate';\n\n\nclass ShopShow extends Component {\n\n    static async getInitialProps(props) {\n        const { headerToken, loggedIn } = validate(props.query.headerToken);\n        const address = props.query.address;\n        const s = Shop(address);\n        const details = await s.methods.getDetails().call();\n        const blockName = await s.methods.blockName().call();\n        return { \n            managerName : details[0],\n            items : [{quantity : details[1], name : 'Rice'},\n                    {quantity: details[2], name : 'Wheat'},\n                    {quantity : details[3], name : 'Arhad'},\n                    {quantity : details[4], name : 'Kerosene'}],\n            fpdName : details[5],\n            shopName : details[6],\n            manager : details[7],\n            addr : details[8],\n            currentAddress : address,\n            headerToken,\n            loggedIn,\n            blockName\n        };\n    }\n\n    renderTable() {\n        const tableRows = this.props.items.map((item, index) => {\n            return (\n                <Table.Row key={index}>\n                    <Table.Cell>{item.name}</Table.Cell>\n                    <Table.Cell>{item.quantity}</Table.Cell>\n                    <Table.Cell>{10}</Table.Cell>\n                </Table.Row>\n            );\n        });\n        return (\n            <div>\n                <h3><strong>STOCK STATEMENT</strong></h3>\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Item Name</Table.HeaderCell>\n                            <Table.HeaderCell>Stock</Table.HeaderCell>\n                            <Table.HeaderCell>Price(per KG)</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {tableRows}\n                    </Table.Body>\n                </Table>\n            </div>\n        );\n    }\n\n    renderCard() {\n        const items = [\n            {\n                header : this.props.shopName,\n                description : 'SHOP NAME',\n                meta : 'This is the name of the shop.'\n            },\n            {\n                header : this.props.fpdName,\n                description : 'FDP NUMBER',\n                meta : 'This is the name of the shop.'\n            },\n            {\n                header : this.props.managerName,\n                description : 'MANAGER NAME',\n                meta : 'This is the name of the shop.'\n            },\n        ];\n\n        return (\n            <div>\n                <Card.Group items = {items} itemsPerRow = {3}/>\n                    \n                <Card.Group itemsPerRow={2}>\n                    <Card>\n                        <Card.Content>\n                            <Card.Header>{this.props.addr}</Card.Header>\n                            <Card.Meta>This is the name of the shop.</Card.Meta>\n                            <Card.Description>SHOP ADDRESS</Card.Description>\n                        </Card.Content>\n                    </Card>\n                    <Card>\n                        <Card.Content>\n                            <Card.Header>{this.props.blockName}</Card.Header>\n                            <Card.Meta>This is the name of the block.</Card.Meta>\n                            <Card.Description>BLOCK NAME</Card.Description>\n                        </Card.Content>\n                    </Card>\n                </Card.Group>\n            </div>\n        );\n    }\n\n    renderRecordButton() {\n        return (\n\n            <Link route={`/${this.props.headerToken}/shops/${this.props.currentAddress}/record`}>\n                <a>\n                    <Button color='blue'>\n                    View Previous Record Details\n                    </Button>\n                </a>\n            </Link>\n\n        );\n    }\n\n    renderButton(){\n        return (\n            <Link route={`/shops/${this.props.currentAddress}/payment`}>\n                <a>\n                    <Button color='blue'>\n                    Make Payment\n                    </Button>\n                </a>\n            </Link>\n        );\n    }\n\n\n    render() {\n        return (\n            <Layout headerToken={this.props.headerToken} loggedIn={this.props.loggedIn}>\n                <Grid style={{color:'#2185D0'}} columns={1}>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderTable()}\n                        </Grid.Column>  \n                    </Grid.Row>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderButton()}\n                        </Grid.Column>  \n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            {this.renderCard()}\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row textAlign='center'>\n                        <Grid.Column>\n                            {this.renderRecordButton()}\n                        </Grid.Column>  \n                    </Grid.Row>\n                    \n                </Grid>\n            </Layout>\n        );\n    }\n}\n\n\nexport default ShopShow;"]},"metadata":{},"sourceType":"module"}