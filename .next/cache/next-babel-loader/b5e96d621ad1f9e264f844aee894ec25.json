{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport validate from '../../localmodules/token_validate';\nimport { Header, Table, Button } from 'semantic-ui-react';\nimport post from '../../localmodules/express_post';\nimport postWithData from '../../localmodules/express_post_data';\nimport Shop from '../../ethereum/shop';\n\nvar PreviousRecord = /*#__PURE__*/function (_Component) {\n  _inherits(PreviousRecord, _Component);\n\n  function PreviousRecord() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PreviousRecord);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PreviousRecord)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"getHolderName\", function _callee(aadhar) {\n      var data, headers, _ref, text, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = {\n                aadhar: aadhar\n              };\n              headers = {\n                'Content-Type': 'application/json'\n              };\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(post('/user/login/me/name', headers, data));\n\n            case 4:\n              _ref = _context.sent;\n              text = _ref.text;\n              status = _ref.status;\n              return _context.abrupt(\"return\", \"Name\");\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(PreviousRecord, [{\n    key: \"renderTable\",\n    value: function renderTable() {\n      console.log(this.props.records); // const tableRows = this.props.records.map((item, index) => {\n\n      var rice = Number(this.props.rice) + (Number(this.props.recordLength) - Number(index)) * 5;\n      var wheat = Number(this.props.wheat) + (Number(this.props.recordLength) - Number(index)) * 5;\n      var arhad = Number(this.props.arhad) + (Number(this.props.recordLength) - Number(index)) * 5;\n      var kerosene = Number(this.props.kerosene) + (Number(this.props.recordLength) - Number(index)) * 5; //     return (\n      //         <Table.Row key={index}>\n      //             <Table.Cell>{index+1}</Table.Cell>\n      //             <Table.Cell>{this.props.nameList[index]}</Table.Cell>\n      //             <Table.Cell>{item.rice}</Table.Cell>\n      //             <Table.Cell>{item.wheat}</Table.Cell>\n      //             <Table.Cell>{item.arhad}</Table.Cell>\n      //             <Table.Cell>{item.kerosene}</Table.Cell>\n      //             <Table.Cell>{item.date}</Table.Cell>\n      //             <Table.Cell>{item.orderid}</Table.Cell>\n      //         </Table.Row>\n      //     );\n      // });\n\n      return __jsx(\"div\", null, __jsx(Table, null, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"SLNO.\"), __jsx(Table.HeaderCell, null, \"Holder Name\"), __jsx(Table.HeaderCell, null, \"Rice\"), __jsx(Table.HeaderCell, null, \"Wheat\"), __jsx(Table.HeaderCell, null, \"Arhad\"), __jsx(Table.HeaderCell, null, \"Kerosene\"), __jsx(Table.HeaderCell, null, \"Date(Time)\"), __jsx(Table.HeaderCell, null, \"Order Id\"))), __jsx(Table.Body, null)));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        loggedIn: this.props.loggedIn,\n        headerToken: this.props.headerToken\n      }, __jsx(Header, {\n        as: \"h2\",\n        textAlign: \"center\",\n        style: {\n          color: '#2185d0'\n        }\n      }, \"RECORD TIMESTAMP\"), this.renderTable());\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var _validate, headerToken, loggedIn, address, shop, recordLength, rice, wheat, arhad, kerosene, records, nameList, i, data, headers, _ref2, text, status;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _validate = validate(props.query.headerToken), headerToken = _validate.headerToken, loggedIn = _validate.loggedIn;\n              address = props.query.address;\n              shop = Shop(address);\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(shop.methods.recordCount().call());\n\n            case 5:\n              recordLength = _context2.sent;\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(shop.methods.rice().call());\n\n            case 8:\n              rice = _context2.sent;\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(shop.methods.wheat().call());\n\n            case 11:\n              wheat = _context2.sent;\n              _context2.next = 14;\n              return _regeneratorRuntime.awrap(shop.methods.arhad().call());\n\n            case 14:\n              arhad = _context2.sent;\n              _context2.next = 17;\n              return _regeneratorRuntime.awrap(shop.methods.kerosene().call());\n\n            case 17:\n              kerosene = _context2.sent;\n              console.log(rice, wheat, arhad, kerosene);\n              _context2.next = 21;\n              return _regeneratorRuntime.awrap(_Promise.all(Array(_parseInt(recordLength)).fill().map(function (element, index) {\n                return shop.methods.recordList(index).call();\n              })));\n\n            case 21:\n              records = _context2.sent;\n              // const fpdNameValue = await shop.methods.fpdName().call();\n              // const dataInp = {\n              //     fpdName : fpdNameValue\n              // }\n              // const headers = { 'Content-Type':'application/json'};\n              // const {data, status} = await postWithData('/record/record_list', headers, dataInp)\n              // const records = data['result'];\n              // console.log(records);\n              nameList = [];\n              i = 0;\n\n            case 24:\n              if (!(i < records.length)) {\n                _context2.next = 36;\n                break;\n              }\n\n              data = {\n                aadhar: records[i].ration\n              };\n              headers = {\n                'Content-Type': 'application/json'\n              };\n              _context2.next = 29;\n              return _regeneratorRuntime.awrap(post('/user/login/me/name', headers, data));\n\n            case 29:\n              _ref2 = _context2.sent;\n              text = _ref2.text;\n              status = _ref2.status;\n              nameList[i] = text;\n\n            case 33:\n              i++;\n              _context2.next = 24;\n              break;\n\n            case 36:\n              console.log(nameList);\n              return _context2.abrupt(\"return\", {\n                headerToken: headerToken,\n                loggedIn: loggedIn,\n                address: address,\n                records: records\n              });\n\n            case 38:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return PreviousRecord;\n}(Component);\n\nexport { PreviousRecord as default };","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/pages/shops/record.js"],"names":["React","Component","Layout","validate","Header","Table","Button","post","postWithData","Shop","PreviousRecord","aadhar","data","headers","text","status","console","log","props","records","rice","Number","recordLength","index","wheat","arhad","kerosene","loggedIn","headerToken","color","renderTable","query","address","shop","methods","recordCount","call","all","Array","fill","map","element","recordList","nameList","i","length","ration"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport validate from '../../localmodules/token_validate';\nimport { Header, Table, Button } from 'semantic-ui-react';\nimport post from '../../localmodules/express_post';\nimport postWithData from '../../localmodules/express_post_data';\nimport Shop from '../../ethereum/shop';\n\n\nexport default class PreviousRecord extends Component {\n\n    static async getInitialProps(props) {\n        const { headerToken, loggedIn } = validate(props.query.headerToken);\n        const address = props.query.address;\n        const shop = Shop(address);\n        const recordLength = await shop.methods.recordCount().call();\n        const rice = await shop.methods.rice().call();\n        const wheat = await shop.methods.wheat().call();\n        const arhad = await shop.methods.arhad().call();\n        const kerosene = await shop.methods.kerosene().call();\n        console.log(rice, wheat, arhad, kerosene);\n        const records = await Promise.all(\n            Array(parseInt(recordLength))\n              .fill()\n              .map((element, index) => {\n                return shop.methods.recordList(index).call();\n              })\n          );\n        // const fpdNameValue = await shop.methods.fpdName().call();\n        // const dataInp = {\n        //     fpdName : fpdNameValue\n        // }\n        // const headers = { 'Content-Type':'application/json'};\n        // const {data, status} = await postWithData('/record/record_list', headers, dataInp)\n        // const records = data['result'];\n        // console.log(records);\n        let nameList = [];\n        for(let i=0;i<records.length;i++){\n            const data = {\n                aadhar : records[i].ration\n            }\n            const headers = {\n                'Content-Type':'application/json'\n            };\n            \n            const { text, status } = await post('/user/login/me/name', headers, data);\n            nameList[i] = text;\n        }\n        console.log(nameList);\n        return { headerToken , loggedIn, address, records }; //, recordLength, nameList, rice, wheat, arhad, kerosene };\n    }\n\n    getHolderName = async (aadhar) => {\n        const data = {\n            aadhar : aadhar\n        }\n        const headers = {\n            'Content-Type':'application/json'\n        };\n        \n        const { text, status } = await post('/user/login/me/name', headers, data);\n        return \"Name\";\n    }\n\n    renderTable() {\n\n        console.log(this.props.records);\n        // const tableRows = this.props.records.map((item, index) => {\n            const rice = Number(this.props.rice) + ((Number(this.props.recordLength)-Number(index))*5);\n            const wheat = Number(this.props.wheat) + ((Number(this.props.recordLength)-Number(index))*5);\n            const arhad = Number(this.props.arhad) + ((Number(this.props.recordLength)-Number(index))*5);\n            const kerosene = Number(this.props.kerosene) + ((Number(this.props.recordLength)-Number(index))*5);\n        //     return (\n        //         <Table.Row key={index}>\n        //             <Table.Cell>{index+1}</Table.Cell>\n        //             <Table.Cell>{this.props.nameList[index]}</Table.Cell>\n        //             <Table.Cell>{item.rice}</Table.Cell>\n        //             <Table.Cell>{item.wheat}</Table.Cell>\n        //             <Table.Cell>{item.arhad}</Table.Cell>\n        //             <Table.Cell>{item.kerosene}</Table.Cell>\n        //             <Table.Cell>{item.date}</Table.Cell>\n        //             <Table.Cell>{item.orderid}</Table.Cell>\n        //         </Table.Row>\n        //     );\n        // });\n        return (\n            <div>\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>SLNO.</Table.HeaderCell>\n                            <Table.HeaderCell>Holder Name</Table.HeaderCell>\n                            <Table.HeaderCell>Rice</Table.HeaderCell>\n                            <Table.HeaderCell>Wheat</Table.HeaderCell>\n                            <Table.HeaderCell>Arhad</Table.HeaderCell>\n                            <Table.HeaderCell>Kerosene</Table.HeaderCell>\n                            <Table.HeaderCell>Date(Time)</Table.HeaderCell>\n                            <Table.HeaderCell>Order Id</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {/* {tableRows} */}\n                    </Table.Body>\n                </Table>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Layout loggedIn={this.props.loggedIn} headerToken={this.props.headerToken}>\n                <Header as='h2' textAlign='center' style={{color:'#2185d0'}}>RECORD TIMESTAMP</Header>\n                {this.renderTable()}\n            </Layout>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}