{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport validate from '../../localmodules/token_validate';\nimport { Header, Table, Button } from 'semantic-ui-react';\nimport post from '../../localmodules/express_post';\nimport Shop from '../../ethereum/shop';\nexport default class PreviousRecord extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"getHolderName\", async aadhar => {\n      const data = {\n        aadhar: aadhar\n      };\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      const {\n        text,\n        status\n      } = await post('/user/login/me/name', headers, data);\n      return \"Name\";\n    });\n  }\n\n  static async getInitialProps(props) {\n    const {\n      headerToken,\n      loggedIn\n    } = validate(props.query.headerToken);\n    const address = props.query.address; // const shop = Shop(address);\n    // const recordLength = await shop.methods.recordCount().call();\n    // const rice = await shop.methods.rice().call();\n    // const wheat = await shop.methods.wheat().call();\n    // const arhad = await shop.methods.arhad().call();\n    // const kerosene = await shop.methods.kerosene().call();\n    // console.log(rice, wheat, arhad, kerosene);\n    // const records = await Promise.all(\n    //     Array(parseInt(recordLength))\n    //       .fill()\n    //       .map((element, index) => {\n    //         return shop.methods.recordList(index).call();\n    //       })\n    //   );\n\n    let nameList = [];\n\n    for (let i = 0; i < records.length; i++) {\n      const data = {\n        aadhar: records[i].aadhar\n      };\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      const {\n        text,\n        status\n      } = await post('/user/login/me/name', headers, data);\n      nameList[i] = text;\n    }\n\n    return {\n      headerToken,\n      loggedIn,\n      address,\n      records,\n      recordLength,\n      nameList,\n      rice,\n      wheat,\n      arhad,\n      kerosene\n    };\n  }\n\n  renderTable() {\n    const tableRows = this.props.records.map((item, index) => {\n      // const name = await this.getHolderName(item.aadhar);\n      const rice = Number(this.props.rice) + (Number(this.props.recordLength) - Number(index)) * 5;\n      const wheat = Number(this.props.wheat) + (Number(this.props.recordLength) - Number(index)) * 5;\n      const arhad = Number(this.props.arhad) + (Number(this.props.recordLength) - Number(index)) * 5;\n      const kerosene = Number(this.props.kerosene) + (Number(this.props.recordLength) - Number(index)) * 5;\n      return __jsx(Table.Row, {\n        key: index\n      }, __jsx(Table.Cell, null, index + 1), __jsx(Table.Cell, null, this.props.nameList[index]), __jsx(Table.Cell, null, rice), __jsx(Table.Cell, null, wheat), __jsx(Table.Cell, null, arhad), __jsx(Table.Cell, null, kerosene), __jsx(Table.Cell, null, item.time), __jsx(Table.Cell, null, item.orderId));\n    });\n    return __jsx(\"div\", null, __jsx(Table, null, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"SLNO.\"), __jsx(Table.HeaderCell, null, \"Holder Name\"), __jsx(Table.HeaderCell, null, \"Rice\"), __jsx(Table.HeaderCell, null, \"Wheat\"), __jsx(Table.HeaderCell, null, \"Arhad\"), __jsx(Table.HeaderCell, null, \"Kerosene\"), __jsx(Table.HeaderCell, null, \"Date(Time)\"), __jsx(Table.HeaderCell, null, \"Order Id\"))), __jsx(Table.Body, null, tableRows)));\n  }\n\n  render() {\n    return __jsx(Layout, {\n      loggedIn: this.props.loggedIn,\n      headerToken: this.props.headerToken\n    }, __jsx(Header, {\n      as: \"h2\",\n      textAlign: \"center\",\n      style: {\n        color: '#2185d0'\n      }\n    }, \"RECORD TIMESTAMP\"), this.renderTable());\n  }\n\n}","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/pages/shops/record.js"],"names":["React","Component","Layout","validate","Header","Table","Button","post","Shop","PreviousRecord","aadhar","data","headers","text","status","getInitialProps","props","headerToken","loggedIn","query","address","nameList","i","records","length","recordLength","rice","wheat","arhad","kerosene","renderTable","tableRows","map","item","index","Number","time","orderId","render","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport validate from '../../localmodules/token_validate';\nimport { Header, Table, Button } from 'semantic-ui-react';\nimport post from '../../localmodules/express_post';\nimport Shop from '../../ethereum/shop';\n\n\nexport default class PreviousRecord extends Component {\n\n    static async getInitialProps(props) {\n        const { headerToken, loggedIn } = validate(props.query.headerToken);\n        const address = props.query.address;\n        // const shop = Shop(address);\n        // const recordLength = await shop.methods.recordCount().call();\n        // const rice = await shop.methods.rice().call();\n        // const wheat = await shop.methods.wheat().call();\n        // const arhad = await shop.methods.arhad().call();\n        // const kerosene = await shop.methods.kerosene().call();\n        // console.log(rice, wheat, arhad, kerosene);\n        // const records = await Promise.all(\n        //     Array(parseInt(recordLength))\n        //       .fill()\n        //       .map((element, index) => {\n        //         return shop.methods.recordList(index).call();\n        //       })\n        //   );\n\n        let nameList = [];\n        for(let i=0;i<records.length;i++){\n            const data = {\n                aadhar : records[i].aadhar\n            }\n            const headers = {\n                'Content-Type':'application/json'\n            };\n            \n            const { text, status } = await post('/user/login/me/name', headers, data);\n            nameList[i] = text;\n        }\n        return { headerToken , loggedIn, address, records, recordLength, nameList, rice, wheat, arhad, kerosene };\n    }\n\n    getHolderName = async (aadhar) => {\n        const data = {\n            aadhar : aadhar\n        }\n        const headers = {\n            'Content-Type':'application/json'\n        };\n        \n        const { text, status } = await post('/user/login/me/name', headers, data);\n        return \"Name\";\n    }\n\n    renderTable() {\n        const tableRows = this.props.records.map((item, index) => {\n            // const name = await this.getHolderName(item.aadhar);\n            const rice = Number(this.props.rice) + ((Number(this.props.recordLength)-Number(index))*5);\n            const wheat = Number(this.props.wheat) + ((Number(this.props.recordLength)-Number(index))*5);\n            const arhad = Number(this.props.arhad) + ((Number(this.props.recordLength)-Number(index))*5);\n            const kerosene = Number(this.props.kerosene) + ((Number(this.props.recordLength)-Number(index))*5);\n            return (\n                <Table.Row key={index}>\n                    <Table.Cell>{index+1}</Table.Cell>\n                    <Table.Cell>{this.props.nameList[index]}</Table.Cell>\n                    <Table.Cell>{rice}</Table.Cell>\n                    <Table.Cell>{wheat}</Table.Cell>\n                    <Table.Cell>{arhad}</Table.Cell>\n                    <Table.Cell>{kerosene}</Table.Cell>\n                    <Table.Cell>{item.time}</Table.Cell>\n                    <Table.Cell>{item.orderId}</Table.Cell>\n                </Table.Row>\n            );\n        });\n        return (\n            <div>\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>SLNO.</Table.HeaderCell>\n                            <Table.HeaderCell>Holder Name</Table.HeaderCell>\n                            <Table.HeaderCell>Rice</Table.HeaderCell>\n                            <Table.HeaderCell>Wheat</Table.HeaderCell>\n                            <Table.HeaderCell>Arhad</Table.HeaderCell>\n                            <Table.HeaderCell>Kerosene</Table.HeaderCell>\n                            <Table.HeaderCell>Date(Time)</Table.HeaderCell>\n                            <Table.HeaderCell>Order Id</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {tableRows}\n                    </Table.Body>\n                </Table>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Layout loggedIn={this.props.loggedIn} headerToken={this.props.headerToken}>\n                <Header as='h2' textAlign='center' style={{color:'#2185d0'}}>RECORD TIMESTAMP</Header>\n                {this.renderTable()}\n            </Layout>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}