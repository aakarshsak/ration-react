{"ast":null,"code":"var fs = require('fs');\n\nvar parse = require('csv-parse');\n\nvar inputFile = 'countries2.csv';\nconsole.log(\"Processing Countries file\");\nvar parser = parse({\n  delimiter: ';'\n}, function (err, data) {\n  // when all countries are available,then process them\n  // note: array element at index 0 contains the row of headers that we should skip\n  data.forEach(function (line) {\n    // create country object out of parsed fields\n    var country = {\n      \"name\": line[0],\n      \"code\": line[1],\n      \"continent\": line[2],\n      \"population\": line[4],\n      \"size\": line[5]\n    };\n    console.log(JSON.stringify(country));\n  });\n}); // read the inputFile, feed the contents to the parser\n\nfs.createReadStream(inputFile).pipe(parser);","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/localModules/data_initialization.js"],"names":["fs","require","parse","inputFile","console","log","parser","delimiter","err","data","forEach","line","country","JSON","stringify","createReadStream","pipe"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,WAAD,CAAnB;;AAEA,IAAIE,SAAS,GAAC,gBAAd;AACAC,OAAO,CAACC,GAAR,CAAY,2BAAZ;AAEA,IAAIC,MAAM,GAAGJ,KAAK,CAAC;AAACK,EAAAA,SAAS,EAAE;AAAZ,CAAD,EAAmB,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACtD;AACA;AACAA,EAAAA,IAAI,CAACC,OAAL,CAAa,UAASC,IAAT,EAAe;AAC1B;AACA,QAAIC,OAAO,GAAG;AAAE,cAASD,IAAI,CAAC,CAAD,CAAf;AACE,cAASA,IAAI,CAAC,CAAD,CADf;AAEE,mBAAcA,IAAI,CAAC,CAAD,CAFpB;AAGE,oBAAeA,IAAI,CAAC,CAAD,CAHrB;AAIE,cAASA,IAAI,CAAC,CAAD;AAJf,KAAd;AAMDP,IAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAZ;AACA,GATD;AAUH,CAbiB,CAAlB,C,CAeA;;AACAZ,EAAE,CAACe,gBAAH,CAAoBZ,SAApB,EAA+Ba,IAA/B,CAAoCV,MAApC","sourcesContent":["var fs = require('fs');\nvar parse = require('csv-parse');\n \nvar inputFile='countries2.csv';\nconsole.log(\"Processing Countries file\");\n \nvar parser = parse({delimiter: ';'}, function (err, data) {\n    // when all countries are available,then process them\n    // note: array element at index 0 contains the row of headers that we should skip\n    data.forEach(function(line) {\n      // create country object out of parsed fields\n      var country = { \"name\" : line[0]\n                    , \"code\" : line[1]\n                    , \"continent\" : line[2]\n                    , \"population\" : line[4]\n                    , \"size\" : line[5]\n                    };\n     console.log(JSON.stringify(country));\n    });    \n});\n \n// read the inputFile, feed the contents to the parser\nfs.createReadStream(inputFile).pipe(parser);"]},"metadata":{},"sourceType":"script"}