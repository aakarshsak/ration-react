{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport validate from '../../localmodules/token_validate';\nimport { Header, Table, Button } from 'semantic-ui-react';\nimport post from '../../localmodules/express_post';\nimport postWithData from '../../localmodules/express_post_data';\nimport Shop from '../../ethereum/shop';\nexport default class PreviousRecord extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"getHolderName\", async aadhar => {\n      const data = {\n        aadhar: aadhar\n      };\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      const {\n        text,\n        status\n      } = await post('/user/login/me/name', headers, data);\n      return \"Name\";\n    });\n  }\n\n  static async getInitialProps(props) {\n    const {\n      headerToken,\n      loggedIn\n    } = validate(props.query.headerToken);\n    const address = props.query.address;\n    const shop = Shop(address); // const recordLength = await shop.methods.recordCount().call();\n    // const rice = await shop.methods.rice().call();\n    // const wheat = await shop.methods.wheat().call();\n    // const arhad = await shop.methods.arhad().call();\n    // const kerosene = await shop.methods.kerosene().call();\n    // console.log(rice, wheat, arhad, kerosene);\n    // const records = await Promise.all(\n    //     Array(parseInt(recordLength))\n    //       .fill()\n    //       .map((element, index) => {\n    //         return shop.methods.recordList(index).call();\n    //       })\n    //   );\n    // const fpdNameValue = await shop.methods.fpdName().call();\n    // const dataInp = {\n    //     fpdName : fpdNameValue\n    // }\n    // const headers = { 'Content-Type':'application/json'};\n    // const {data, status} = await postWithData('/record/record_list', headers, dataInp)\n    // const records = data['result'];\n    // console.log(records);\n\n    let nameList = [];\n\n    for (let i = 0; i < records.length; i++) {\n      const data = {\n        aadhar: records[i].ration\n      };\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      const {\n        text,\n        status\n      } = await post('/user/login/me/name', headers, data);\n      nameList[i] = text;\n    }\n\n    console.log(nameList);\n    return {\n      headerToken,\n      loggedIn,\n      address,\n      records,\n      nameList\n    }; //, recordLength, rice, wheat, arhad, kerosene };\n  }\n\n  renderTable() {\n    console.log(this.props.records);\n    const tableRows = this.props.records.map((item, index) => {\n      // const rice = Number(this.props.rice) + ((Number(this.props.recordLength)-Number(index))*5);\n      // const wheat = Number(this.props.wheat) + ((Number(this.props.recordLength)-Number(index))*5);\n      // const arhad = Number(this.props.arhad) + ((Number(this.props.recordLength)-Number(index))*5);\n      // const kerosene = Number(this.props.kerosene) + ((Number(this.props.recordLength)-Number(index))*5);\n      return __jsx(Table.Row, {\n        key: index\n      }, __jsx(Table.Cell, null, index + 1), __jsx(Table.Cell, null, this.props.nameList[index]), __jsx(Table.Cell, null, item.rice), __jsx(Table.Cell, null, item.wheat), __jsx(Table.Cell, null, item.arhad), __jsx(Table.Cell, null, item.kerosene), __jsx(Table.Cell, null, item.date), __jsx(Table.Cell, null, item.orderid));\n    });\n    return __jsx(\"div\", null, __jsx(Table, null, __jsx(Table.Header, null, __jsx(Table.Row, null, __jsx(Table.HeaderCell, null, \"SLNO.\"), __jsx(Table.HeaderCell, null, \"Holder Name\"), __jsx(Table.HeaderCell, null, \"Rice\"), __jsx(Table.HeaderCell, null, \"Wheat\"), __jsx(Table.HeaderCell, null, \"Arhad\"), __jsx(Table.HeaderCell, null, \"Kerosene\"), __jsx(Table.HeaderCell, null, \"Date(Time)\"), __jsx(Table.HeaderCell, null, \"Order Id\"))), __jsx(Table.Body, null, tableRows)));\n  }\n\n  render() {\n    return __jsx(Layout, {\n      loggedIn: this.props.loggedIn,\n      headerToken: this.props.headerToken\n    }, __jsx(Header, {\n      as: \"h2\",\n      textAlign: \"center\",\n      style: {\n        color: '#2185d0'\n      }\n    }, \"RECORD TIMESTAMP\"), this.renderTable());\n  }\n\n}","map":{"version":3,"sources":["/home/zoro/Documents/Programming/JS/ration/ration-react/pages/shops/record.js"],"names":["React","Component","Layout","validate","Header","Table","Button","post","postWithData","Shop","PreviousRecord","aadhar","data","headers","text","status","getInitialProps","props","headerToken","loggedIn","query","address","shop","nameList","i","records","length","ration","console","log","renderTable","tableRows","map","item","index","rice","wheat","arhad","kerosene","date","orderid","render","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Layout from '../../components/layout';\nimport validate from '../../localmodules/token_validate';\nimport { Header, Table, Button } from 'semantic-ui-react';\nimport post from '../../localmodules/express_post';\nimport postWithData from '../../localmodules/express_post_data';\nimport Shop from '../../ethereum/shop';\n\n\nexport default class PreviousRecord extends Component {\n\n    static async getInitialProps(props) {\n        const { headerToken, loggedIn } = validate(props.query.headerToken);\n        const address = props.query.address;\n        const shop = Shop(address);\n        // const recordLength = await shop.methods.recordCount().call();\n        // const rice = await shop.methods.rice().call();\n        // const wheat = await shop.methods.wheat().call();\n        // const arhad = await shop.methods.arhad().call();\n        // const kerosene = await shop.methods.kerosene().call();\n        // console.log(rice, wheat, arhad, kerosene);\n        // const records = await Promise.all(\n        //     Array(parseInt(recordLength))\n        //       .fill()\n        //       .map((element, index) => {\n        //         return shop.methods.recordList(index).call();\n        //       })\n        //   );\n        // const fpdNameValue = await shop.methods.fpdName().call();\n        // const dataInp = {\n        //     fpdName : fpdNameValue\n        // }\n        // const headers = { 'Content-Type':'application/json'};\n        // const {data, status} = await postWithData('/record/record_list', headers, dataInp)\n        // const records = data['result'];\n        // console.log(records);\n        let nameList = [];\n        for(let i=0;i<records.length;i++){\n            const data = {\n                aadhar : records[i].ration\n            }\n            const headers = {\n                'Content-Type':'application/json'\n            };\n            \n            const { text, status } = await post('/user/login/me/name', headers, data);\n            nameList[i] = text;\n        }\n        console.log(nameList);\n        return { headerToken , loggedIn, address, records, nameList } //, recordLength, rice, wheat, arhad, kerosene };\n    }\n\n    getHolderName = async (aadhar) => {\n        const data = {\n            aadhar : aadhar\n        }\n        const headers = {\n            'Content-Type':'application/json'\n        };\n        \n        const { text, status } = await post('/user/login/me/name', headers, data);\n        return \"Name\";\n    }\n\n    renderTable() {\n\n        console.log(this.props.records);\n        const tableRows = this.props.records.map((item, index) => {\n            // const rice = Number(this.props.rice) + ((Number(this.props.recordLength)-Number(index))*5);\n            // const wheat = Number(this.props.wheat) + ((Number(this.props.recordLength)-Number(index))*5);\n            // const arhad = Number(this.props.arhad) + ((Number(this.props.recordLength)-Number(index))*5);\n            // const kerosene = Number(this.props.kerosene) + ((Number(this.props.recordLength)-Number(index))*5);\n            return (\n                <Table.Row key={index}>\n                    <Table.Cell>{index+1}</Table.Cell>\n                    <Table.Cell>{this.props.nameList[index]}</Table.Cell>\n                    <Table.Cell>{item.rice}</Table.Cell>\n                    <Table.Cell>{item.wheat}</Table.Cell>\n                    <Table.Cell>{item.arhad}</Table.Cell>\n                    <Table.Cell>{item.kerosene}</Table.Cell>\n                    <Table.Cell>{item.date}</Table.Cell>\n                    <Table.Cell>{item.orderid}</Table.Cell>\n                </Table.Row>\n            );\n        });\n        return (\n            <div>\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>SLNO.</Table.HeaderCell>\n                            <Table.HeaderCell>Holder Name</Table.HeaderCell>\n                            <Table.HeaderCell>Rice</Table.HeaderCell>\n                            <Table.HeaderCell>Wheat</Table.HeaderCell>\n                            <Table.HeaderCell>Arhad</Table.HeaderCell>\n                            <Table.HeaderCell>Kerosene</Table.HeaderCell>\n                            <Table.HeaderCell>Date(Time)</Table.HeaderCell>\n                            <Table.HeaderCell>Order Id</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {tableRows}\n                    </Table.Body>\n                </Table>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Layout loggedIn={this.props.loggedIn} headerToken={this.props.headerToken}>\n                <Header as='h2' textAlign='center' style={{color:'#2185d0'}}>RECORD TIMESTAMP</Header>\n                {this.renderTable()}\n            </Layout>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}